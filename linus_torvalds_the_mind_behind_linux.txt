Talk	en	zh-tw
linus_torvalds_the_mind_behind_linux	"Chris Anderson: This is such a strange thing. Your software, Linux, is in millions of computers, it probably powers much of the Internet. And I think that there are, like, a billion and a half active Android devices out there. Your software is in every single one of them. It's kind of amazing. You must have some amazing software headquarters driving all this. That's what I thought — and I was shocked when I saw a picture of it. I mean, this is — this is the Linux world headquarters. (Laughter) (Applause) Linus Torvalds: It really doesn't look like much. And I have to say, the most interesting part in this picture, that people mostly react to, is the walking desk. It is the most interesting part in my office and I'm not actually using it anymore. And I think the two things are related. The way I work is ... I want to not have external stimulation. You can kind of see, on the walls are this light green. I'm told that at mental institutions they use that on the walls. (Laughter) It's like a calming color, it's not something that really stimulates you. What you can't see is the computer here, you only see the screen, but the main thing I worry about in my computer is — it doesn't have to be big and powerful, although I like that — it really has to be completely silent. I know people who work for Google and they have their own small data center at home, and I don't do that. My office is the most boring office you'll ever see. And I sit there alone in the quiet. If the cat comes up, it sits in my lap. And I want to hear the cat purring, not the sound of the fans in the computer. CA: So this is astonishing, because working this way, you're able to run this vast technology empire — it is an empire — so that's an amazing testament to the power of open source. Tell us how you got to understand open source and how it lead to the development of Linux. LT: I mean, I still work alone. Really — I work alone in my house, often in my bathrobe. When a photographer shows up, I dress up, so I have clothes on. (Laughter) And that's how I've always worked. I mean, this was how I started Linux, too. I did not start Linux as a collaborative project. I started it as one in a series of many projects I had done at the time for myself, partly because I needed the end result, but even more because I just enjoyed programming. So it was about the end of the journey, which, 25 years later, we still have not reached. But it was really about the fact that I was looking for a project on my own and there was no open source, really, on my radar at all. And what happened is ... the project grows and becomes something you want to show off to people. Really, this is more of a, ""Wow, look at what I did!"" And trust me — it was not that great back then. I made it publicly available, and it wasn't even open source at that point. At that point it was source that was open, but there was no intention behind using the kind of open-source methodology that we think of today to improve it. It was more like, ""Look, I've been working on this for half a year, I'd love to have comments."" And other people approached me. At the University of Helsinki, I had a friend who was one of the open source — it was called mainly ""free software"" back then — and he actually introduced me to the notion that, hey, you can use these open-source licenses that had been around. And I thought about it for a while. I was actually worried about the whole commercial interests coming in. I mean, that's one of the worries I think most people who start out have, is that they worry about somebody taking advantage of their work, right? And I decided, ""What the hell?"" And — CA: And then at some point, someone contributed some code that you thought, ""Wow, that really is interesting, I would not have thought of that. This could actually improve this."" LT: It didn't even start by people contributing code, it was more that people started contributing ideas. And just the fact that somebody else takes a look at your project — and I'm sure it's true of other things, too, but it's definitely true in code — is that somebody else takes an interest in your code, looks at it enough to actually give you feedback and give you ideas. That was a huge thing for me. I was 21 at the time, so I was young, but I had already programmed for half my life, basically. And every project before that had been completely personal and it was a revelation when people just started commenting, started giving feedback on your code. And even before they started giving code back, that was, I think, one of the big moments where I said, ""I love other people!"" Don't get me wrong — I'm actually not a people person. (Laughter) I don't really love other people — (Laughter) But I love computers, I love interacting with other people on email, because it kind of gives you that buffer. But I do love other people who comment and get involved in my project. And it made it so much more. CA: So was there a moment when you saw what was being built and it suddenly started taking off, and you thought, ""Wait a sec, this actually could be something huge, not just a personal project that I'm getting nice feedback on, but a kind of explosive development in the whole technology world""? LT: Not really. I mean, the big point for me, really, was not when it was becoming huge, it was when it was becoming little. The big point for me was not being alone and having 10, maybe 100 people being involved — that was a big point. Then everything else was very gradual. Going from 100 people to a million people is not a big deal — to me. Well, I mean, maybe it is if you're — (Laughter) If you want to sell your result then it's a huge deal — don't get me wrong. But if you're interested in the technology and you're interested in the project, the big part was getting the community. Then the community grew gradually. And there's actually not a single point where I went like, ""Wow, that just took off!"" because it — I mean — it took a long time, relatively. CA: So all the technologists that I talk to really credit you with massively changing their work. And it's not just Linux, it's this thing called Git, which is this management system for software development. Tell us briefly about that and your role in that. LT: So one of the issues we had, and this took a while to start to appear, is when you ... When you grow from having 10 people or 100 people working on a project to having 10,000 people, which — I mean, right now we're in the situation where just on the kernel, we have 1,000 people involved in every single release and that's every two months, roughly two or three months. Some of those people don't do a lot. There's a lot of people who make small, small changes. But to maintain this, the scale changes how you have to maintain it. And we went through a lot of pain. And there are whole projects that do only source-code maintenance. CVS is the one that used to be the most commonly used, and I hated CVS with a passion and refused to touch it and tried something else that was radical and interesting and everybody else hated. CA: (Laughs) LT: And we were in this bad spot, where we had thousands of people who wanted to participate, but in many ways, I was the kind of break point, where I could not scale to the point where I could work with thousands of people. So Git is my second big project, which was only created for me to maintain my first big project. And this is literally how I work. I don't code for — well, I do code for fun — but I want to code for something meaningful so every single project I've ever done has been something I needed and — CA: So really, both Linux and Git kind of arose almost as an unintended consequence of your desire not to have to work with too many people. LT: Absolutely. Yes. (Laughter) CA: That's amazing. LT: Yeah. (Applause) And yet, you're the man who's transformed technology not just once but twice, and we have to try and understand why it is. You've given us some clues, but ... Here's a picture of you as a kid, with a Rubik's Cube. You mentioned that you've been programming since you were like 10 or 11, half your life. Were you this sort of computer genius, you know, übernerd, were you the star at school who could do everything? What were you like as a kid? LT: Yeah, I think I was the prototypical nerd. I mean, I was ... I was not a people person back then. That's my younger brother. I was clearly more interested in the Rubik's Cube than my younger brother. (Laughter) My younger sister, who's not in the picture, when we had family meetings — and it's not a huge family, but I have, like, a couple of cousins — she would prep me beforehand. Like, before I stepped into the room she would say, ""OK. That's so-and-so ..."" Because I was not — I was a geek. I was into computers, I was into math, I was into physics. I was good at that. I don't think I was particularly exceptional. Apparently, my sister said that my biggest exceptional quality was that I would not let go. CA: OK, so let's go there, because that's interesting. You would not let go. So that's not about being a geek and being smart, that's about being ... stubborn? LT: That's about being stubborn. That's about, like, just starting something and not saying, ""OK, I'm done, let's do something else — Look: shiny!"" And I notice that in many other parts in my life, too. I lived in Silicon Valley for seven years. And I worked for the same company, in Silicon Valley, for the whole time. That is unheard of. That's not how Silicon Valley works. The whole point of Silicon Valley is that people jump between jobs to kind of mix up the pot. And that's not the kind of person I am. CA: But during the actual development of Linux itself, that stubbornness sometimes brought you in conflict with other people. Talk about that a bit. Was that essential to sort of maintain the quality of what was being built? How would you describe what happened? LT: I don't know if it's essential. Going back to the ""I'm not a people person,"" — sometimes I'm also ... shall we say, ""myopic"" when it comes to other people's feelings, and that sometimes makes you say things that hurt other people. And I'm not proud of that. (Applause) But, at the same time, it's — I get people who tell me that I should be nice. And then when I try to explain to them that maybe you're nice, maybe you should be more aggressive, they see that as me being not nice. (Laughter) What I'm trying to say is we are different. I'm not a people person; it's not something I'm particularly proud of, but it's part of me. And one of the things I really like about open source is it really allows different people to work together. We don't have to like each other — and sometimes we really don't like each other. Really — I mean, there are very, very heated arguments. But you can, actually, you can find things that — you don't even agree to disagree, it's just that you're interested in really different things. And coming back to the point where I said earlier that I was afraid of commercial people taking advantage of your work, it turned out, and very quickly turned out, that those commercial people were lovely, lovely people. And they did all the things that I was not at all interested in doing, and they had completely different goals. And they used open source in ways that I just did not want to go. But because it was open source they could do it, and it actually works really beautifully together. And I actually think it works the same way. You need to have the people-people, the communicators, the warm and friendly people who like — (Laughter) really want to hug you and get you into the community. But that's not everybody. And that's not me. I care about the technology. There are people who care about the UI. I can't do UI to save my life. I mean, if I was stranded on an island and the only way to get off that island was the make a pretty UI, I'd die there. (Laughter) So there's different kinds of people, and I'm not making excuses, I'm trying to explain. CA: Now, when we talked last week, you talked about some other trait that you have, which I found really interesting. It's this idea called taste. And I've just got a couple of images here. I think this is an example of not particularly good taste in code, and this one is better taste, which one can immediately see. What is the difference between these two? LT: So this is — How many people here actually have coded? CA: Oh my goodness. LT: So I guarantee you, everybody who raised their hand, they have done what's called a singly-linked list. And it's taught — This, the first not very good taste approach, is basically how it's taught to be done when you start out coding. And you don't have to understand the code. The most interesting part to me is the last if statement. Because what happens in a singly-linked list — this is trying to remove an existing entry from a list — and there's a difference between if it's the first entry or whether it's an entry in the middle. Because if it's the first entry, you have to change the pointer to the first entry. If it's in the middle, you have to change the pointer of a previous entry. So they're two completely different cases. CA: And that's better. LT: And this is better. It does not have the if statement. And it doesn't really matter — I don't want you understand why it doesn't have the if statement, but I want you to understand that sometimes you can see a problem in a different way and rewrite it so that a special case goes away and becomes the normal case. And that's good code. But this is simple code. This is CS 101. This is not important — although, details are important. To me, the sign of people I really want to work with is that they have good taste, which is how ... I sent you this stupid example that is not relevant because it's too small. Good taste is much bigger than this. Good taste is about really seeing the big patterns and kind of instinctively knowing what's the right way to do things. CA: OK, so we're putting the pieces together here now. You have taste, in a way that's meaningful to software people. You're — (Laughter) LT: I think it was meaningful to some people here. CA: You're a very smart computer coder, and you're hellish stubborn. But there must be something else. I mean, you've changed the future. You must have the ability of these grand visions of the future. You're a visionary, right? LT: I've actually felt slightly uncomfortable at TED for the last two days, because there's a lot of vision going on, right? And I am not a visionary. I do not have a five-year plan. I'm an engineer. And I think it's really — I mean — I'm perfectly happy with all the people who are walking around and just staring at the clouds and looking at the stars and saying, ""I want to go there."" But I'm looking at the ground, and I want to fix the pothole that's right in front of me before I fall in. This is the kind of person I am. (Cheers) (Applause) CA: So you spoke to me last week about these two guys. Who are they and how do you relate to them? LT: Well, so this is kind of cliché in technology, the whole Tesla versus Edison, where Tesla is seen as the visionary scientist and crazy idea man. And people love Tesla. I mean, there are people who name their companies after him. (Laughter) The other person there is Edison, who is actually often vilified for being kind of pedestrian and is — I mean, his most famous quote is, ""Genius is one percent inspiration and 99 percent perspiration."" And I'm in the Edison camp, even if people don't always like him. Because if you actually compare the two, Tesla has kind of this mind grab these days, but who actually changed the world? Edison may not have been a nice person, he did a lot of things — he was maybe not so intellectual, not so visionary. But I think I'm more of an Edison than a Tesla. CA: So our theme at TED this week is dreams — big, bold, audacious dreams. You're really the antidote to that. LT: I'm trying to dial it down a bit, yes. CA: That's good. (Laughter) We embrace you, we embrace you. Companies like Google and many others have made, arguably, like, billions of dollars out of your software. Does that piss you off? LT: No. No, it doesn't piss me off for several reasons. And one of them is, I'm doing fine. I'm really doing fine. But the other reason is — I mean, without doing the whole open source and really letting go thing, Linux would never have been what it is. And it's brought experiences I don't really enjoy, public talking, but at the same time, this is an experience. Trust me. So there's a lot of things going on that make me a very happy man and thinking I did the right choices. CA: Is the open source idea — this is, I think we'll end here — is the open source idea fully realized now in the world, or is there more that it could go, are there more things that it could do? LT: So, I'm of two minds there. I think one reason open source works so well in code is that at the end of the day, code tends to be somewhat black and white. There's often a fairly good way to decide, this is done correctly and this is not done well. Code either works or it doesn't, which means that there's less room for arguments. And we have arguments despite this, right? In many other areas — I mean, people have talked about open politics and things like that — and it's really hard sometimes to say that, yes, you can apply the same principles in some other areas just because the black and white turns into not just gray, but different colors. So, obviously open source in science is making a comeback. Science was there first. But then science ended up being pretty closed, with very expensive journals and some of that going on. And open source is making a comeback in science, with things like arXiv and open journals. Wikipedia changed the world, too. So there are other examples, I'm sure there are more to come. CA: But you're not a visionary, and so it's not up to you to name them. LT: No. (Laughter) It's up to you guys to make them, right? CA: Exactly. Linus Torvalds, thank you for Linux, thank you for the Internet, thank you for all those Android phones. Thank you for coming here to TED and revealing so much of yourself. LT: Thank you. (Applause)"	克里斯·安德森：這真是件怪事。你的 Linux 軟體裝在數百萬台電腦內，大部分的網路都靠它驅動。我想現在大概有十五億支 Android 裝置在用。你的軟體也裝在每一支裡面。這真了不起。你一定有很了不起的軟體總部操縱這些。我原本是這麼想的，所以我看到這張照片時相當驚訝。我是說，這個──這個就是 Linux 全球總部。 （笑聲） （掌聲） 林納斯·托瓦茲：這看起來真的沒什麼了不起。我得說，這張照片最有意思的部分，大家最有反應的地方，就是這臺跑步機辦公桌。我的辦公室裡就這個最好玩，我現在其實不用它了。我想這兩件事其實相關。 我的工作方式是──我不想要有外界刺激。你們大概看得出來，牆面漆著淡綠色。人家告訴我精神病院的牆壁都漆這種顏色。 （笑聲） 這是讓人平靜的顏色，這不是會刺激你的東西。 你看不到的是那裡有臺電腦，你只能看到螢幕，但是我最擔心電腦的部分是──它不用很大很強，雖然這部分我也喜歡──但它真的必須完全靜音。我認識一些在 Google 工作的人，他們在家裡有自己的小型資料中心，但是我沒有。我的辦公室是你見過最乏味的辦公室。我自己一個人坐在很安靜的環境裡。如果我的貓跑來了，牠會坐在我的腿上。我要聽貓咕嚕咕嚕的聲音，不要聽電腦風扇的聲音。 克：所以這真令人驚訝，因為你這種工作方式，還能管理這麼大的科技帝國──這的確是個帝國──所以這就是開放原始碼力量有多大的驚人證據。 跟我們聊聊你怎麼開始了解開放原始碼，及這如何帶領你開發 Linux。 林：我是說，我仍然是獨行俠。真的，我自己一個人在家裡工作，通常是穿著浴袍。有攝影師來了，我就穿整齊一點，所以我有穿衣服。 （笑聲） 我總是這樣工作。我是說，我也是這樣開始 Linux。我開始 Linux 時，沒有把它當成協同計劃。我開始是把它當成一系列計劃中的一個，我當時是為自己做的，部分原因是我需要最終結果，但是更重要的是我就是喜歡寫程式。所以重點是旅程的終點，然而 25 年後，我們還沒有達到目的地。但事實真的是我在為自己找個計劃，說真的開放原始碼根本不在我的考慮範圍之內。 當時的情況是──計劃有進展，變成你很想跟人炫耀的東西。說真的，這更像是：「哇，你看我做了什麼！」相信我，那時候沒有現在這麼好。我把它公開共享，那時候根本還不是開放原始碼。那個時候原始碼是開放的，但是背後根本沒有意圖要用我們今天認為的開放原始碼方法論來改進。這更像是：「你看，我花了大半年做這個，我想聽聽意見。」 然後有些人來接觸我。在赫爾辛基大學，我有個朋友在做開放原始碼──那時候大家還叫「自由軟體」──實際上是他向我介紹這個概念，嘿，你可以用現有的開放原始碼授權條款。我考慮了一陣子。我擔心的其實是隨之而來的商業利益。我是說，我想大多數創業的人都會擔心這一點，就是他們擔心有人會占他們便宜，對吧？後來我決定「管他去死！」所以── 克：之後有一天，有人貢獻了一些程式，而你這麼想：「哇，這真的很有意思，我從沒想過這點。這應該可以改進這個。」 林：這甚至不是從有人貢獻程式開始，比較像是大家開始貢獻想法。光是這個事實，就是別人看了你的計劃──我確信別的事也一樣，但這在寫程式這件事上絕對是這樣──就是有人對你的程式有興趣，還仔細研究到能真的給你意見，給你想法。這對我是件大事。 那時我 21 歲，是很年輕，但我基本上已經寫了半輩子的程式。在那之前每一件計劃都是我個人的東西，所以當大家開始評論，開始對你的程式給意見時，真的是一種啟示。甚至在他們開始回饋程式前，我想那是重要的一刻，因為我說：「我愛別人！」不要誤會，我不是一個喜歡社交的人。 （笑聲） 我不是真的愛別人── （笑聲） 但是我愛電腦，我愛與別人用電郵互動，因為這好像給了你緩衝的空間。但是我的確喜愛會評論並參與計劃的人。這使計劃豐富許多。 克：有沒有哪個時刻，你看到現有的專案突然大受歡迎，然後你想：「等一下，這應該會變成更大的東西，不再只是個人的計劃，可以得到一些很好的建議，而是有點像整個科技界的爆炸性進展？」 林：其實沒有。我說真的，對我而言重點不是它變大的時候，而是它變小的時候。對我而言重點是不再單打獨鬥，而是有十人，或許一百人參與，這是重點。然後其它的事都慢慢發生。從一百人到一百萬人沒什麼了不起，對我而言。我是說，可能很了不起，如果你── （笑聲） 如果你想賣你的結果那當然很了不起──不要誤會。但是如果你是對科技有興趣，你對這計劃本身有興趣，那重點是建立一個社群。然後這個社群慢慢成長。其實並沒有什麼特別的時刻讓我覺得「哇，起飛了！」因為它──我是說──這真的花了相對而言很長的時間。 克：跟我聊過的科技人都歸功你，說你完全改變了他們的工作。而且不只是 Linux，還有這個叫做 Git 的，這是一套軟體開發的（版本）管理系統。跟我們簡單說明一下你在其中的角色。 林：那時我們有一個問題，在做了一陣子之後才出現，就是當你──當你的計劃從十人或百人成長到一萬人，這個──就是說現在我們的情況是僅僅在核心部分，每次釋出新版本都有上千人參與，而且每兩個月，大約兩到三個月就釋出一次。有些人做得不多。有很多人只做一點點修改。 但是要維護這個，這樣的規模會改變你維護的方法。我們經歷了很多痛苦。有很多計劃只能做原始碼維護。CVS （協作版本系統）過去是最常用的系統，我恨死了 CVS，堅決不肯使用它，我也試了其它激進有趣的東西，但是其他人卻恨死了。 克：（笑聲） 林：我們處在很糟的情況，我們有數千人想要參與，但是從很多方面看，我都是那個中斷點，我無法放大自己的格局到能與數千人一同工作。 所以 Git 是我的第二個大型計畫，是專門為我打造，以維護我的第一個大型計畫，這真的就是我工作的方式。我寫程式不是為了──嗯，我的確會為了好玩寫程式──但是我想寫有意義的程式，所以我完成的每一項計畫都是我需要的東西，而且── 克：所以真的，Linux 和 Git 兩者的出現幾乎都是你不想與很多人一同工作而產生意料之外的結果。 林：一點也沒錯！是的！ （笑聲） 克：真了不起。林：是的。 （掌聲） 然而，你是轉變科技的人，不只一次，而是二次，我們得試著瞭解為什麼會這樣。你給了我們一些線索，但是……這張照片是你小時候，在玩魔術方塊。你之前提到你大概從10 或 11 歲就開始寫程式，半輩子。 你是那種電腦天才，你知道的，超級書呆子，學校裡什麼都能做的明星嗎？你小時候是什麼樣子？ 林：對，我想我是那種典型的書呆子。我是說，我是……那時候我就不是愛社交的人。那是我的弟弟。很明顯我對魔術方塊比較有興趣，不太理我弟弟。 （笑聲） 我的妹妹，沒有在照片上，每次我們大家庭聚在一起──不是很大的家庭，但是我有幾個堂兄弟姊妹──她都會先幫我預習一下。像在我踏進房門之前她會說：「看好，這是誰和誰……」因為我不──我很宅。我非常投入電腦，我非常投入數學，我非常投入物理。我那項很強。我從不認為自己很超凡。很明顯，我的妹妹總是說我最超凡的特質就是我從不放手。 克：好，就來談這個，因為這很有意思。你不放手。所以這跟宅或聰明沒關，這是因為你很……固執？ 林：的確是因為我很固執。那就像，你才開始了什麼，你不會說：「好！不玩了！來做別的吧……看！那個好亮！」 我注意到我在生活其它方面上也看得到這個特質。我在矽谷住了七年。我都待在同一家公司，在矽谷！整段時間。這簡直是前所未聞。矽谷不是這樣的。矽谷的重點就是大家在不同的公司跳來跳去，好像大熔爐一樣。但我不是那種人。 克：但是在 Linux 本身實際開發期間，那種固執的態度有時候會帶來人際間的衝突。跟我們談談這一點。是不是一定要維持做出來的東西的品質？你會怎麼說那時的情況？ 林：我不知道那是不是必要的。回到我說我不善社交那部分，有的時候我也……怎麼說呢，在說到別人的感覺時，我是「大近視」！有時候會讓你說出傷人的話。我一點都不引以為豪。 （掌聲） 但是同時，那是……我碰到有人對我說我應該更和藹一點。我就會試著對他們解釋說你們可能很和藹，但是你們其實應該更兇一點，他們就咬著說我不和藹。 （笑聲） 我想說的是我們都不一樣。我不善社交；這不是我特別引以為傲的事情，但是這就是我的一部分。我真的很喜歡開放原始碼的一件事，就是它真的讓不同的人一同合作。我們不必喜歡對方，而且有的時候我們真的不喜歡對方，我是說真的，的確有很火爆的爭論發生。但是你真的，你可以看到事情是你甚至不用刻意同意大家意見不同，那真的只是你對不同的事情有興趣。 回到我之前說的那一點，我很怕生意人占你的工作成果的便宜，結果，而且是很快就看到的結果，那些生意人都是非常可愛的人。他們做所有我沒興趣做的事，而且他們有完全不同的目標。而且他們就是以我不想用的方式來用開放原始碼。但是因為這是開放原始碼，所以他們可以那麼做，其實我們合作得很不錯。 我覺得這件事也一樣。你需要有善於交際的人，能做溝通的人，溫和友善的人，他們喜歡…… （笑聲） 真的想給你抱抱，能讓你融入社群。但是並非每個人都如此。我不是這種人。我關心科技；有的人關心 UI （使用者介面）。我不會做 UI 來救自己一命。我是說，如果我被困在某個島上，唯一能逃離那個島的方法是做一個漂亮的 UI，我會死在那裡。 （笑聲） 所以每個人都不一樣，我不是在找藉口，我只是試著解釋。 克：上星期我們聊的時候，你談到你其它的特點，我覺得很有意思，就是這個「品味」的想法。 我這裡有幾張照片。我想這是寫程式的品味不太好的例子，這張的品味比較好，你可以立刻發現。這兩個有什麼不同？ 林：所以這是——這裡有多少人真的寫過程式？ 克：天啊！ 林：所以我向你保證，每一位舉手的人，他們都做過 singly-linked list（單向連結串列）。它教……這個，第一張不太有品味的方法，基本上就是你一開始學寫程式時教的方法。你不用懂這個程式。 對我而言最有趣的部分是這個最後的 if 敘述(if statement)。因為在單向連結串列裡，這裡是要試著從資料清單中移除一筆現有的資料，這是第一筆資料還是中間的資料會有點不一樣。因為如果這是第一筆資料，你就必須把指標指向第一筆資料，如果資料在清單中間，你就必須把指標指向該資料的前一筆資料。所以這是兩個完全不同的例子。 克：那樣比較好。 林：這樣比較好。它沒有 if 敘述。這一點也不重要，我不是要你瞭解為什麼它沒有 if 敘述，但我要你瞭解有時候你可以用不同的角度看問題，並重寫它，那麼例外就會消失，變成普通情況。那就是好的程式。但這是簡單的程式。是必修的程式設計入門。這不重要，但是細節很重要。 對我而言，我真的很想一同工作的人都有個現象，就是他們有好的品味，我給你的這個例子很笨，一點都不相干，因為太小了。好的品味比這個大多了。好的品味是你真的會看到大的模式，而且好像有直覺知道什麼是正確的方法。 克：好，所以我們現在可以拼湊出整體的樣子了。你有品味，而且這個品味對寫軟體的人而言有意義。你是…… （笑聲） 林：我想這對這裡的某些人有意義。 克：你是非常聰明的電腦程式設計師，而且你頑固的要命。但是一定還有什麼。我是說，你改變了未來。你一定有看到宏偉願景的能力。你是個有願景的人，對吧？ 林：我過去兩天在 TED 大會其實有點不自在，因為這裡有很多願景，對吧？而我不是有願景的人。我沒有五年計畫。我是工程師。而且我覺得這真的──我是說，我對這些人一點意見也沒有，他們可以四海飄遊，看看雲，看看星星，然後說：「我想去那裡。」但是我是看著地面的人，而且我想把那個就在我正前方的坑洞補好，免得我跌倒。我就是這種人。 （歡呼） （掌聲） 克：你兩個星期前跟我談到這兩個傢伙。他們是誰？你跟他們有什麼關係？ 林：嗯，這可以說是科技界老掉牙的故事了，特斯拉對上愛迪生，特斯拉被視為有願景的科學家和有瘋狂想法的人。大家都愛特斯拉。我是說，有人還用他的名字命名自己的公司。 （笑聲） 另外一位是愛迪生，他常被人貶低為那種平庸的路人甲，而且是──我是說，他最膾炙人口的名言是：「天才是百分之一的靈感加上百分之九十九的汗水。」我是站在愛迪生這一邊的，即使大家並不都喜歡他。因為如果你實際比較這兩位，特斯拉最近還挺夯的，但是誰真的改變了世界？愛迪生或許不是一個和善的人，他做了很多事，他可能沒那麼聰明，也沒有看得那麼遠。但是我想我更像愛迪生，而不是特斯拉。 克：所以這個星期我們TED 大會的主題是夢想，膽大無畏的夢想。你真的是個反面教材。 林：我是想要往回拉一下，是的。 克：很好。 （笑聲）我們接納你，我們接納你。 像 Google 這樣的公司還有其他的人都可以說靠你的軟體賺了幾十億元，這讓你生氣嗎？ 林：不會。不會，我不生氣有幾個原因。其中一個是，我過得還不錯。我真的過得挺好的。 但是另外一個原因是，我是說，如果沒有做這個開放原始碼而且沒有真的放手，Linux 不可能發展成今天的樣子。它的確也為我帶來我不太喜歡的經驗，像是公開演講，但同時，這也是一種經驗。相信我。所以發生了很多事讓我成為非常快樂的人，也讓我認為我做了正確的決定。 克：這個開放原始碼想法這是──我想我們該結束了──現在全世界都完全瞭解這個開放原始碼的想法了嗎？還是還有很多可以發展的？還有很多事可以做嗎？ 林：其實我不太確定。我想開放原始碼在程式開發上這麼成功，其中一個原因是最終，程式往往是黑白的。我們常常有還不錯的方法判斷這個做對了，那個不太好。程式只有會動與不會動兩種，這意味著沒有什麼空間爭論。儘管如此我們還是有很多爭論，對吧？在其它很多地方，我是說，大家在談論開放政治或類似的東西，有時候真的很難說：是的，你可以運用相同的原則在其它領域上，因為黑與白不但會變成灰，還會變成其它不同的顏色。 看得出來開放資源的觀念現在在科學界又流行起來。科學早就是那樣了。但是之後科學變的非常封閉，還有非常貴的期刊和一些有的沒的東西。開放資源的觀念在科學界又流行起來，現在有像是 arXiv 開放式論文網站和其它開放式期刊。維基百科也改變了世界。還有其它的例子，我確信以後還會出現更多。 克：但是你不是願景家，所以這可不是由你來說的。 林：沒錯。 （笑聲） 這是你們這些人要創造的，對吧？ 克：沒錯。 林納斯·托瓦茲，謝謝你給了我們 Linux，謝謝你給了我們網路，也謝謝你給了我們Android 手機。 謝謝你蒞臨 TED與我們開誠布公。 林：謝謝！ （掌聲）
