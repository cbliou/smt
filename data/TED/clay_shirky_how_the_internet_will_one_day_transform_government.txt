Talk	en	zh-tw
clay_shirky_how_the_internet_will_one_day_transform_government	"I want to talk to you today about something the open-source programming world can teach democracy, but before that, a little preamble. Let's start here. This is Martha Payne. Martha's a 9-year-old Scot who lives in the Council of Argyll and Bute. A couple months ago, Payne started a food blog called NeverSeconds, and she would take her camera with her every day to school to document her school lunches. Can you spot the vegetable? (Laughter) And, as sometimes happens, this blog acquired first dozens of readers, and then hundreds of readers, and then thousands of readers, as people tuned in to watch her rate her school lunches, including on my favorite category, ""Pieces of hair found in food."" (Laughter) This was a zero day. That's good. And then two weeks ago yesterday, she posted this. A post that read: ""Goodbye."" And she said, ""I'm very sorry to tell you this, but my head teacher pulled me out of class today and told me I'm not allowed to take pictures in the lunch room anymore. I really enjoyed doing this. Thank you for reading. Goodbye."" You can guess what happened next, right? (Laughter) The outrage was so swift, so voluminous, so unanimous, that the Council of Argyll and Bute reversed themselves the same day and said, ""We would, we would never censor a nine-year-old."" (Laughter) Except, of course, this morning. (Laughter) And this brings up the question, what made them think they could get away with something like that? (Laughter) And the answer is, all of human history prior to now. (Laughter) So, what happens when a medium suddenly puts a lot of new ideas into circulation? Now, this isn't just a contemporaneous question. This is something we've faced several times over the last few centuries. When the telegraph came along, it was clear that it was going to globalize the news industry. What would this lead to? Well, obviously, it would lead to world peace. The television, a medium that allowed us not just to hear but see, literally see, what was going on elsewhere in the world, what would this lead to? World peace. (Laughter) The telephone? You guessed it: world peace. Sorry for the spoiler alert, but no world peace. Not yet. Even the printing press, even the printing press was assumed to be a tool that was going to enforce Catholic intellectual hegemony across Europe. Instead, what we got was Martin Luther's 95 Theses, the Protestant Reformation, and, you know, the Thirty Years' War. All right, so what all of these predictions of world peace got right is that when a lot of new ideas suddenly come into circulation, it changes society. What they got exactly wrong was what happens next. The more ideas there are in circulation, the more ideas there are for any individual to disagree with. More media always means more arguing. That's what happens when the media's space expands. And yet, when we look back on the printing press in the early years, we like what happened. We are a pro-printing press society. So how do we square those two things, that it leads to more arguing, but we think it was good? And the answer, I think, can be found in things like this. This is the cover of ""Philosophical Transactions,"" the first scientific journal ever published in English in the middle of the 1600s, and it was created by a group of people who had been calling themselves ""The Invisible College,"" a group of natural philosophers who only later would call themselves scientists, and they wanted to improve the way natural philosophers argued with each other, and they needed to do two things for this. They needed openness. They needed to create a norm which said, when you do an experiment, you have to publish not just your claims, but how you did the experiment. If you don't tell us how you did it, we won't trust you. But the other thing they needed was speed. They had to quickly synchronize what other natural philosophers knew. Otherwise, you couldn't get the right kind of argument going. The printing press was clearly the right medium for this, but the book was the wrong tool. It was too slow. And so they invented the scientific journal as a way of synchronizing the argument across the community of natural scientists. The scientific revolution wasn't created by the printing press. It was created by scientists, but it couldn't have been created if they didn't have a printing press as a tool. So what about us? What about our generation, and our media revolution, the Internet? Well, predictions of world peace? Check. (Laughter) More arguing? Gold star on that one. (Laughter) (Laughter) I mean, YouTube is just a gold mine. (Laughter) Better arguing? That's the question. So I study social media, which means, to a first approximation, I watch people argue. And if I had to pick a group that I think is our Invisible College, is our generation's collection of people trying to take these tools and to press it into service, not for more arguments, but for better arguments, I'd pick the open-source programmers. Programming is a three-way relationship between a programmer, some source code, and the computer it's meant to run on, but computers are such famously inflexible interpreters of instructions that it's extraordinarily difficult to write out a set of instructions that the computer knows how to execute, and that's if one person is writing it. Once you get more than one person writing it, it's very easy for any two programmers to overwrite each other's work if they're working on the same file, or to send incompatible instructions that simply causes the computer to choke, and this problem grows larger the more programmers are involved. To a first approximation, the problem of managing a large software project is the problem of keeping this social chaos at bay. Now, for decades there has been a canonical solution to this problem, which is to use something called a ""version control system,"" and a version control system does what is says on the tin. It provides a canonical copy of the software on a server somewhere. The only programmers who can change it are people who've specifically been given permission to access it, and they're only allowed to access the sub-section of it that they have permission to change. And when people draw diagrams of version control systems, the diagrams always look something like this. All right. They look like org charts. And you don't have to squint very hard to see the political ramifications of a system like this. This is feudalism: one owner, many workers. Now, that's fine for the commercial software industry. It really is Microsoft's Office. It's Adobe's Photoshop. The corporation owns the software. The programmers come and go. But there was one programmer who decided that this wasn't the way to work. This is Linus Torvalds. Torvalds is the most famous open-source programmer, created Linux, obviously, and Torvalds looked at the way the open-source movement had been dealing with this problem. Open-source software, the core promise of the open-source license, is that everybody should have access to all the source code all the time, but of course, this creates the very threat of chaos you have to forestall in order to get anything working. So most open-source projects just held their noses and adopted the feudal management systems. But Torvalds said, ""No, I'm not going to do that."" His point of view on this was very clear. When you adopt a tool, you also adopt the management philosophy embedded in that tool, and he wasn't going to adopt anything that didn't work the way the Linux community worked. And to give you a sense of how enormous a decision like this was, this is a map of the internal dependencies within Linux, within the Linux operating system, which sub-parts of the program rely on which other sub-parts to get going. This is a tremendously complicated process. This is a tremendously complicated program, and yet, for years, Torvalds ran this not with automated tools but out of his email box. People would literally mail him changes that they'd agreed on, and he would merge them by hand. And then, 15 years after looking at Linux and figuring out how the community worked, he said, ""I think I know how to write a version control system for free people."" And he called it ""Git."" Git is distributed version control. It has two big differences with traditional version control systems. The first is that it lives up to the philosophical promise of open-source. Everybody who works on a project has access to all of the source code all of the time. And when people draw diagrams of Git workflow, they use drawings that look like this. And you don't have to understand what the circles and boxes and arrows mean to see that this is a far more complicated way of working than is supported by ordinary version control systems. But this is also the thing that brings the chaos back, and this is Git's second big innovation. This is a screenshot from GitHub, the premier Git hosting service, and every time a programmer uses Git to make any important change at all, creating a new file, modifying an existing one, merging two files, Git creates this kind of signature. This long string of numbers and letters here is a unique identifier tied to every single change, but without any central coordination. Every Git system generates this number the same way, which means this is a signature tied directly and unforgeably to a particular change. This has the following effect: A programmer in Edinburgh and a programmer in Entebbe can both get the same — a copy of the same piece of software. Each of them can make changes and they can merge them after the fact even if they didn't know of each other's existence beforehand. This is cooperation without coordination. This is the big change. Now, I tell you all of this not to convince you that it's great that open-source programmers now have a tool that supports their philosophical way of working, although I think that is great. I tell you all of this because of what I think it means for the way communities come together. Once Git allowed for cooperation without coordination, you start to see communities form that are enormously large and complex. This is a graph of the Ruby community. It's an open-source programming language, and all of the interconnections between the people — this is now not a software graph, but a people graph, all of the interconnections among the people working on that project — and this doesn't look like an org chart. This looks like a dis-org chart, and yet, out of this community, but using these tools, they can now create something together. So there are two good reasons to think that this kind of technique can be applied to democracies in general and in particular to the law. When you make the claim, in fact, that something on the Internet is going to be good for democracy, you often get this reaction. (Music) (Laughter) Which is, are you talking about the thing with the singing cats? Like, is that the thing you think is going to be good for society? To which I have to say, here's the thing with the singing cats. That always happens. And I don't just mean that always happens with the Internet, I mean that always happens with media, full stop. It did not take long after the rise of the commercial printing press before someone figured out that erotic novels were a good idea. (Laughter) You don't have to have an economic incentive to sell books very long before someone says, ""Hey, you know what I bet people would pay for?"" (Laughter) It took people another 150 years to even think of the scientific journal, right? So — (Laughter) (Applause) So the harnessing by the Invisible College of the printing press to create the scientific journal was phenomenally important, but it didn't happen big, and it didn't happen quick, and it didn't happen fast, so if you're going to look for where the change is happening, you have to look on the margins. So, the law is also dependency-related. This is a graph of the U.S. Tax Code, and the dependencies of one law on other laws for the overall effect. So there's that as a site for source code management. But there's also the fact that law is another place where there are many opinions in circulation, but they need to be resolved to one canonical copy, and when you go onto GitHub, and you look around, there are millions and millions of projects, almost all of which are source code, but if you look around the edges, you can see people experimenting with the political ramifications of a system like that. Someone put up all the Wikileaked cables from the State Department, along with software used to interpret them, including my favorite use ever of the Cablegate cables, which is a tool for detecting naturally occurring haiku in State Department prose. (Laughter) Right. (Laughter) The New York Senate has put up something called Open Legislation, also hosting it on GitHub, again for all of the reasons of updating and fluidity. You can go and pick your Senator and then you can see a list of bills they have sponsored. Someone going by Divegeek has put up the Utah code, the laws of the state of Utah, and they've put it up there not just to distribute the code, but with the very interesting possibility that this could be used to further the development of legislation. Somebody put up a tool during the copyright debate last year in the Senate, saying, ""It's strange that Hollywood has more access to Canadian legislators than Canadian citizens do. Why don't we use GitHub to show them what a citizen-developed bill might look like?"" And it includes this very evocative screenshot. This is a called a ""diff,"" this thing on the right here. This shows you, for text that many people are editing, when a change was made, who made it, and what the change is. The stuff in red is the stuff that got deleted. The stuff in green is the stuff that got added. Programmers take this capability for granted. No democracy anywhere in the world offers this feature to its citizens for either legislation or for budgets, even though those are the things done with our consent and with our money. Now, I would love to tell you that the fact that the open-source programmers have worked out a collaborative method that is large scale, distributed, cheap, and in sync with the ideals of democracy, I would love to tell you that because those tools are in place, the innovation is inevitable. But it's not. Part of the problem, of course, is just a lack of information. Somebody put a question up on Quora saying, ""Why is it that lawmakers don't use distributed version control?"" This, graphically, was the answer. (Laughter) (Laughter) (Applause) And that is indeed part of the problem, but only part. The bigger problem, of course, is power. The people experimenting with participation don't have legislative power, and the people who have legislative power are not experimenting with participation. They are experimenting with openness. There's no democracy worth the name that doesn't have a transparency move, but transparency is openness in only one direction, and being given a dashboard without a steering wheel has never been the core promise a democracy makes to its citizens. So consider this. The thing that got Martha Payne's opinions out into the public was a piece of technology, but the thing that kept them there was political will. It was the expectation of the citizens that she would not be censored. That's now the state we're in with these collaboration tools. We have them. We've seen them. They work. Can we use them? Can we apply the techniques that worked here to this? T.S. Eliot once said, ""One of the most momentous things that can happen to a culture is that they acquire a new form of prose."" I think that's wrong, but — (Laughter) I think it's right for argumentation. Right? A momentous thing that can happen to a culture is they can acquire a new style of arguing: trial by jury, voting, peer review, now this. Right? A new form of arguing has been invented in our lifetimes, in the last decade, in fact. It's large, it's distributed, it's low-cost, and it's compatible with the ideals of democracy. The question for us now is, are we going to let the programmers keep it to themselves? Or are we going to try and take it and press it into service for society at large? Thank you for listening. (Applause) (Applause) Thank you. Thank you. (Applause)"	"今天我想和大家談談關於從開放原始碼程式中學習民主但是在開始之前，先來段前言吧我們從這裡開始 這是瑪莎.佩恩，九歲的蘇格蘭小女孩居住在阿蓋爾-比特行政區幾個月以前，佩恩開了一個飲食博客叫做NeverSeconds，她會帶著相機到學校記錄每天的營養午餐有人找得到蔬菜在哪嗎？（笑聲）然後，就像一般會發生的那樣開始有一些人來收看她的部落格然後是幾百人然後是幾千人，人們點進來看她為她學校的營養午餐分級包括我最愛的一個類別“在食物裡發現頭髮”（笑聲）那天的午餐得了零分，這樣很好 兩個禮拜前的昨天，她貼了一篇文章文章標題是""再見""她說，“很抱歉要告訴大家”""班主任今天把我拉出教室，跟我說""""他們不准我繼續在餐廳拍照了""""雖然我真的很喜歡做這件事""""謝謝你們的閱讀，再見"" 你們猜得出來接下來發生什麼事了吧？（笑聲）廣大網友的怒火燒得又快又旺，矛頭一致然後阿蓋爾-比特議會馬上在同一天改變說法，表示：“我們從來、”“從來不會對一位九歲孩子的部落格進行審查”（笑聲）當然，除了今天早上以外（笑聲）而這就產生了一個疑問是什麼讓他們以為他們可以就這樣拍拍屁股了事？（笑聲）答案是，至今以來整個人類歷史都是這樣發展的 （笑聲）所以當新的想法忽然透過一個媒介大量流傳會發生什麼事？ 這不只是一個現今時代才有的疑問我們早在過去的幾世紀中就已面對過好幾次了當電報發明的時候，很明顯地新聞產業開始全球化這可能會造成什麼結果？這個嘛，顯然地，這可能造就世界和平電視，一個不只是可以用聽的傳播媒體還可以親眼看到發生在世界各地的事情這可能會造成什麼結果？世界和平（笑聲）電話？你會猜：世界和平抱歉透露一下劇情：不過，沒有世界和平，還沒有儘管印刷機被認為是用來鞏固天主教知識份子在歐洲霸權大業的工具但我們看到的卻是馬丁路德的《九十五條論綱》宗教改革、還有，你知道的三十年戰爭。好這些關於世界和平的預言說中了一點那就是：當大量的新思想一夕之間廣為流傳，就會改變社會而這個預言猜錯的是接下來會發生的事 當越多概念想法散播出去就有越多的想法供人們反對越多的媒體永遠代表了越多論戰這就是當媒體空間擴展時會發生的事但是，我們回顧早年的印刷機時代我們喜歡那時發生的事我們正處於一個後印刷機時期的社會 所以我們該如何整合這兩個結果？雖然會導致更多論戰，但如何讓我們覺得這是好的？ 我想答案可以從這樣的東西中找到：這是《自然科學會報》的封面它是世界最早的科學英文雜誌出版於17世紀中期是由一群曾經自稱為""無形學院""的人們所創辦的他們是一批自然哲學家稍後又改稱自己為科學家他們的目的是要改善自然哲學家之間互相辯論的方式為此他們需要做兩件事他們需要公開性。他們必須建立一個規範：當你進行一項實驗時你不能只是發表你的主張還必須發表你的實驗過程如果你不告訴大家你是怎麼做的，就不會有人相信你不過他們還需要另外一樣東西：速度他們必須迅速且同步處理其他自然哲學家知道的東西，否則的話就無法讓討論確實進行印刷機就是個適合的媒介書本反而不適合，因為它太慢了所以他們發明了科學雜誌當作一種同步整合這些自然哲學家們不同論據的方式印刷機並沒有造成科學革命而是科學家自己創造的但如果沒有以印刷機作為工具就不可能發生科學革命 那我們呢？我們這一代和我們的媒體革命：網路，又造就了什麼？這個嘛，世界和平的預言？有的（笑聲）更多的論戰？給這個五顆星（笑聲）（笑聲）我的意思是，YouTube 根本就是口水戰天堂（笑聲）更有品質的辯論？這才是真正的問題 我研究社會媒體這就意味著：我觀察人們爭論如果要我選出一個群體，可以代表我們這個世代的""無形學院""，一群出自這個世代的人們嘗試利用這些媒體工具不只是為了更多的機會，也為了更優質的辯論我會選出開放源碼程式設計師程式設計是種三方的關係一個程式設計師、一些原始碼還有跑程式的電腦不過電腦是出名的死腦筋要寫出一組可以讓電腦知道如何執行的指令是極端困難的這還只是在只有一個設計師的情況下如果讓一個以上的設計師一起寫程式很容易就會發生兩個設計師的指令在共同製作的檔案上互相重疊的情況或是寫出互相矛盾的指令讓電腦無法順利運作當越多程式設計師一起工作這個問題就越大舉一個最相近的例子開發大型軟體計畫的管理困難就跟社群媒體混亂的管理問題一樣 幾十年來，這個問題都有標準的解決程序，通常被稱為“版本控制系統”這個系統會絲毫不差地做你要它做的事它提供軟體一個標準備份並存在某處的伺服器裡唯一可以更動它的是擁有存取許可的程式設計師但他們也只被允許改動他們被授權更動的部分而版本控制系統的示意圖長得都是這種樣子好，他們像是組織結構圖一樣你不必費力去弄清楚這樣一個系統的政治結果這就是一種封建制度：一個擁有者，無數個工人 這對商業軟體工業來說沒什麼問題就像 Microsoft 的 Office 系列，和 Adobe 的 Photoshop這些公司擁有這些軟體而程式設計師只是僱員 但有一天，一位設計師決定這不是正確的工作方式他就是林納斯.托瓦茲托瓦茲是最出名的開放源碼程式設計師從名字就看得出來，他創辦了Linux。托瓦茲看好開放源碼運動處理這類問題的方式開放源碼軟體，開放源碼授權的根本理念就是每個人都應該要有取得原始碼的權利不過，當然這樣就會造成上述所說的混亂，而為了程式運作順利就必須事先預防因此大部份開放原始碼計畫只好摸摸鼻子回頭使用那些封建管理系統 但托瓦茲說：「我才不要那樣。」他的立場非常清楚當你使用一個工具，你同時也接受了那個工具背後的管理理念所以他不會接受使用任何跟 Linux 團隊理念不相符的東西而為了要讓你對這種決定有龐大有點概念，這是一個Linux 的內部依賴關係圖在 Linux 操作系統裡面，程式的每一個單元都互相依賴，以此讓運作順利這是一個極端複雜的流程這是一個極端複雜的程式但多年以來，托瓦茲不靠任何自動化程式而是用他的 email 收件匣運作這些設計師們把協調出來的更動寄給他然後他會親自把這些更動整合在一起 之後，靠著 15 年來對 Linux 的觀察和尋找團隊工作的方法，他說：「我想我知道該怎麼寫一個讓自由設計師使用的版本控制系統了」 他稱之為""Git""。Git 是分散式版本控制系統跟傳統的版本控制系統有兩個最大的差異第一，它實踐了開放原始碼的中心理念每個在參與工作計畫的人都擁有獲得原始碼的權利而要製作 Git 的工作流程示意圖時它們都會長得像這樣你不必特地去瞭解這些圓圈方塊和箭頭的意義，就可以知道這個工作流程的複雜度遠遠超過了普通的版本控制系統 可是這也帶來了之前所說的混亂因此，這就是 Git 的第二個創新這是一張 GitHub（Git 最主要的存取服務）的螢幕截圖只要每一次設計師使用Git進行任何重大的改動例如建立新檔案、修改舊的檔案或合併不同的檔案，Git 就會產生這種標示這一長串數字和字母是每一個更動都有的、獨一無二的識別碼，而且沒有經手任何中央協調處理每一個Git系統都以同樣的方式產生這些數字意思就是，這是一個識別標誌會直接綁在每一個更動上面，而且無法偽造 這個方式達到的成果是：一個在蘇格蘭的設計師和在烏甘達的設計師可以同時拿到同樣的軟體副本他們可以各自進行更動和合併就算他們各自都不知道對方的存在這是一種不需要中介協調的合作方式這是一項重大的變革 我告訴你們這些，不是想要你們覺得，哇這些開放源碼程式設計師這下有了好工具可以幫助實踐他們的工作哲學，真是太棒了雖然我真的覺得這的確很棒我告訴你們這些，是因為我從中看到了這對不同社群間的整合產生的意義 自從 Git 開創了“互相合作而不需居中整合”的方式你就會開始看到非常巨大而且複雜的社群形式 這是一個 Ruby 社群的圖示Ruby 是一種開放原始碼程式語言而在其中人們之間的連結——這不是一個軟體圖示，而是人際的圖示所有在同一個企劃共同工作的人們這是他們之間的連結而這一點都不像個組織結構圖還比較像個反組織結構圖，然而從這個社群裡，而不單單只是使用那些工具人們可以一起合作、製作程式所以現在有兩個很好的理由這樣想：這種方式可以應用在普遍的民主制度，尤其是在法律上 但事實上，當你這樣告訴別人：「網路上有些東西對民主制度是好的」你通常會得到這樣的反應： （音樂）（笑聲） 意思是：你是指像會唱歌的貓這類東西嗎？這就是你說的對社會有幫助的事物？我必須說，像唱歌的貓這種東西總是會有的我並不只是指這總是發生在網路上我是指任何媒體都會產生這類事情，就這樣在商業性印刷興起後沒多久就有人發現印製色情小說是門好生意（笑聲）你不需要靠經濟誘因來賣書賣多久就會有人說：「欸，想知道我賭多少在大家願意花多少錢買這些書嗎？」（笑聲）人們甚至還要多花150年才想到創辦科學雜誌，對吧？所以——（笑聲、掌聲） 所以“無形學院”利用印刷機創辦了科學雜誌這是個重要事件，但並不是個劃時代的里程碑而且它發展的速度不快所以如果你想知道改變發生在哪裡你必須從邊緣地帶尋找 法律也是互相依賴的這是一張美國稅法的圖示顯示法規與法規之間的依賴關係以及其整體效果所以，我們有了管理程式碼的網站但是事實上，法律也是一個供許多不同意見傳播的地方但是它們最終都必須變成一個標準版本而當你到 GitHub 上看看你會看到難以計數的製作計畫幾乎全部都是程式碼但如果你往網路邊緣找，你會發現有人正在實驗這種系統的政治效應有人把維基解密發佈的美國國務院電報和用來解讀的軟體一起放上網路包括一種我最愛用在他們公佈的國務院電報的軟體，那是種專門用來偵測國務院電報裡自然產生的俳句的工具（笑聲）是啊（笑聲）紐約州參議院設立了名為《公開立法》（暫譯）法案，也使用 GitHub 的服務同樣是為了更新速度與流暢度你可以上去瀏覽你們區的參議員就可以看到他們支持的法案有人透過 Divegeek 發佈了猶他法規就是猶他州的州法，而他們這麼做並不是只為了也為了可以將這個用在進一步發展立法過程的有趣可能性去年參議院的著作權辯論裡有人發佈了一樣工具，說：「好萊塢比加拿大公民有更多接觸加拿大立法委員的管道，這非常奇怪。我們來用 GitHub讓他們看看一個公民規劃的法案會是什麼樣子。」而這張非常令人震撼的截圖也包含在內 右邊這塊稱為""diff""這部分是給你看許多人一起編輯的內容什麼時候改的、誰改的以及改動的內容是什麼紅色是被刪除的東西綠色則是多加進去的東西程式設計師真是物盡其用了世上沒有任何民主國家可以提供公民這樣的機會，不論是關於立法或預算就算那些事是在我們的同意和金錢之下通過的 如果可以的話，我很想告訴你們開源程式設計師已經想出了一種規模廣大的合作方式便宜而且和民主的理想一致，我很想告訴你們，這些工具都已經準備好了因此改革是必然的。但事實並不是這樣當然，部分的原因只是出在缺乏資訊有人在問答網站上問了一個問題「為什麼立法的人不使用分散式版本控制的方式？」這個則是圖像示的答案（笑聲）（笑聲、掌聲）這的確是一部分的問題，但只是一部分而已 當然，更大的問題出在權力那些實際參與以實驗這個政治效應的人並沒有立法權，而有立法權的人卻不去參與這個實驗這些實驗是關於公開性如果沒有公開透明的程序那就不叫做民主，但是透明性只不過是公開性的一種面向，而給一艘沒有舵的船，也並不是民主國家對國民的中心承諾 所以想想看這個瑪莎.佩恩的想法能傳達給大眾是因為一點科技的幫助但讓它持續曝光的是政治意願大眾期望著她不用接受審查這才是我們目前和這些合作性工具的發展情況我們擁有、見識過它們，它們行得通我們可以利用它們嗎？我們可以將左邊的方式應用在右邊這上面嗎？ T.S.艾略特曾說：「一個文化裡所能發生的最重大的事是發現新的散文形式。」我不這麼認為啦，不過——（笑聲）這是一個正確的立論方式，對吧？一個文化裡能發生的最重大的事情是他們可以發展出新的論辯方式：法官審判、投票、同儕審查、然後是這個，對吧？ 在我們的人生裡，一種新的論辯方式已被發明而且其實是在過去十年裡發生的它規模極大、很廣泛、低成本而且它很適合實現民主制度的理想而現在的問題是：我們要繼續只讓這些程式設計師使用它嗎？或者，我們可以試著使用它、讓它為社會大眾服務？ 感謝大家出席聆聽（掌聲）（掌聲）謝謝，謝謝（掌聲）"
