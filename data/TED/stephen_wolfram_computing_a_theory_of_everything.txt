Talk	en	zh-tw
stephen_wolfram_computing_a_theory_of_everything	"So I want to talk today about an idea. It's a big idea. Actually, I think it'll eventually be seen as probably the single biggest idea that's emerged in the past century. It's the idea of computation. Now, of course, that idea has brought us all of the computer technology we have today and so on. But there's actually a lot more to computation than that. It's really a very deep, very powerful, very fundamental idea, whose effects we've only just begun to see. Well, I myself have spent the past 30 years of my life working on three large projects that really try to take the idea of computation seriously. So I started off at a young age as a physicist using computers as tools. Then, I started drilling down, thinking about the computations I might want to do, trying to figure out what primitives they could be built up from and how they could be automated as much as possible. Eventually, I created a whole structure based on symbolic programming and so on that let me build Mathematica. And for the past 23 years, at an increasing rate, we've been pouring more and more ideas and capabilities and so on into Mathematica, and I'm happy to say that that's led to many good things in R & D and education, lots of other areas. Well, I have to admit, actually, that I also had a very selfish reason for building Mathematica: I wanted to use it myself, a bit like Galileo got to use his telescope 400 years ago. But I wanted to look not at the astronomical universe, but at the computational universe. So we normally think of programs as being complicated things that we build for very specific purposes. But what about the space of all possible programs? Here's a representation of a really simple program. So, if we run this program, this is what we get. Very simple. So let's try changing the rule for this program a little bit. Now we get another result, still very simple. Try changing it again. You get something a little bit more complicated. But if we keep running this for a while, we find out that although the pattern we get is very intricate, it has a very regular structure. So the question is: Can anything else happen? Well, we can do a little experiment. Let's just do a little mathematical experiment, try and find out. Let's just run all possible programs of the particular type that we're looking at. They're called cellular automata. You can see a lot of diversity in the behavior here. Most of them do very simple things, but if you look along all these different pictures, at rule number 30, you start to see something interesting going on. So let's take a closer look at rule number 30 here. So here it is. We're just following this very simple rule at the bottom here, but we're getting all this amazing stuff. It's not at all what we're used to, and I must say that, when I first saw this, it came as a huge shock to my intuition. And, in fact, to understand it, I eventually had to create a whole new kind of science. (Laughter) This science is different, more general, than the mathematics-based science that we've had for the past 300 or so years. You know, it's always seemed like a big mystery: how nature, seemingly so effortlessly, manages to produce so much that seems to us so complex. Well, I think we've found its secret: It's just sampling what's out there in the computational universe and quite often getting things like Rule 30 or like this. And knowing that starts to explain a lot of long-standing mysteries in science. It also brings up new issues, though, like computational irreducibility. I mean, we're used to having science let us predict things, but something like this is fundamentally irreducible. The only way to find its outcome is, effectively, just to watch it evolve. It's connected to, what I call, the principle of computational equivalence, which tells us that even incredibly simple systems can do computations as sophisticated as anything. It doesn't take lots of technology or biological evolution to be able to do arbitrary computation; just something that happens, naturally, all over the place. Things with rules as simple as these can do it. Well, this has deep implications about the limits of science, about predictability and controllability of things like biological processes or economies, about intelligence in the universe, about questions like free will and about creating technology. You know, in working on this science for many years, I kept wondering, ""What will be its first killer app?"" Well, ever since I was a kid, I'd been thinking about systematizing knowledge and somehow making it computable. People like Leibniz had wondered about that too 300 years earlier. But I'd always assumed that to make progress, I'd essentially have to replicate a whole brain. Well, then I got to thinking: This scientific paradigm of mine suggests something different — and, by the way, I've now got huge computation capabilities in Mathematica, and I'm a CEO with some worldly resources to do large, seemingly crazy, projects — So I decided to just try to see how much of the systematic knowledge that's out there in the world we could make computable. So, it's been a big, very complex project, which I was not sure was going to work at all. But I'm happy to say it's actually going really well. And last year we were able to release the first website version of Wolfram Alpha. Its purpose is to be a serious knowledge engine that computes answers to questions. So let's give it a try. Let's start off with something really easy. Hope for the best. Very good. Okay. So far so good. (Laughter) Let's try something a little bit harder. Let's do some mathy thing, and with luck it'll work out the answer and try and tell us some interesting things things about related math. We could ask it something about the real world. Let's say — I don't know — what's the GDP of Spain? And it should be able to tell us that. Now we could compute something related to this, let's say ... the GDP of Spain divided by, I don't know, the — hmmm ... let's say the revenue of Microsoft. (Laughter) The idea is that we can just type this in, this kind of question in, however we think of it. So let's try asking a question, like a health related question. So let's say we have a lab finding that ... you know, we have an LDL level of 140 for a male aged 50. So let's type that in, and now Wolfram Alpha will go and use available public health data and try and figure out what part of the population that corresponds to and so on. Or let's try asking about, I don't know, the International Space Station. And what's happening here is that Wolfram Alpha is not just looking up something; it's computing, in real time, where the International Space Station is right now at this moment, how fast it's going, and so on. So Wolfram Alpha knows about lots and lots of kinds of things. It's got, by now, pretty good coverage of everything you might find in a standard reference library. But the goal is to go much further and, very broadly, to democratize all of this knowledge, and to try and be an authoritative source in all areas. To be able to compute answers to specific questions that people have, not by searching what other people may have written down before, but by using built in knowledge to compute fresh new answers to specific questions. Now, of course, Wolfram Alpha is a monumentally huge, long-term project with lots and lots of challenges. For a start, one has to curate a zillion different sources of facts and data, and we built quite a pipeline of Mathematica automation and human domain experts for doing this. But that's just the beginning. Given raw facts or data to actually answer questions, one has to compute: one has to implement all those methods and models and algorithms and so on that science and other areas have built up over the centuries. Well, even starting from Mathematica, this is still a huge amount of work. So far, there are about 8 million lines of Mathematica code in Wolfram Alpha built by experts from many, many different fields. Well, a crucial idea of Wolfram Alpha is that you can just ask it questions using ordinary human language, which means that we've got to be able to take all those strange utterances that people type into the input field and understand them. And I must say that I thought that step might just be plain impossible. Two big things happened: First, a bunch of new ideas about linguistics that came from studying the computational universe; and second, the realization that having actual computable knowledge completely changes how one can set about understanding language. And, of course, now with Wolfram Alpha actually out in the wild, we can learn from its actual usage. And, in fact, there's been an interesting coevolution that's been going on between Wolfram Alpha and its human users, and it's really encouraging. Right now, if we look at web queries, more than 80 percent of them get handled successfully the first time. And if you look at things like the iPhone app, the fraction is considerably larger. So, I'm pretty pleased with it all. But, in many ways, we're still at the very beginning with Wolfram Alpha. I mean, everything is scaling up very nicely and we're getting more confident. You can expect to see Wolfram Alpha technology showing up in more and more places, working both with this kind of public data, like on the website, and with private knowledge for people and companies and so on. You know, I've realized that Wolfram Alpha actually gives one a whole new kind of computing that one can call knowledge-based computing, in which one's starting not just from raw computation, but from a vast amount of built-in knowledge. And when one does that, one really changes the economics of delivering computational things, whether it's on the web or elsewhere. You know, we have a fairly interesting situation right now. On the one hand, we have Mathematica, with its sort of precise, formal language and a huge network of carefully designed capabilities able to get a lot done in just a few lines. Let me show you a couple of examples here. So here's a trivial piece of Mathematica programming. Here's something where we're sort of integrating a bunch of different capabilities here. Here we'll just create, in this line, a little user interface that allows us to do something fun there. If you go on, that's a slightly more complicated program that's now doing all sorts of algorithmic things and creating user interface and so on. But it's something that is very precise stuff. It's a precise specification with a precise formal language that causes Mathematica to know what to do here. Then on the other hand, we have Wolfram Alpha, with all the messiness of the world and human language and so on built into it. So what happens when you put these things together? I think it's actually rather wonderful. With Wolfram Alpha inside Mathematica, you can, for example, make precise programs that call on real world data. Here's a real simple example. You can also just sort of give vague input and then try and have Wolfram Alpha figure out what you're talking about. Let's try this here. But actually I think the most exciting thing about this is that it really gives one the chance to democratize programming. I mean, anyone will be able to say what they want in plain language. Then, the idea is that Wolfram Alpha will be able to figure out what precise pieces of code can do what they're asking for and then show them examples that will let them pick what they need to build up bigger and bigger, precise programs. So, sometimes, Wolfram Alpha will be able to do the whole thing immediately and just give back a whole big program that you can then compute with. Here's a big website where we've been collecting lots of educational and other demonstrations about lots of kinds of things. I'll show you one example here. This is just an example of one of these computable documents. This is probably a fairly small piece of Mathematica code that's able to be run here. Okay. Let's zoom out again. So, given our new kind of science, is there a general way to use it to make technology? So, with physical materials, we're used to going around the world and discovering that particular materials are useful for particular technological purposes. Well, it turns out we can do very much the same kind of thing in the computational universe. There's an inexhaustible supply of programs out there. The challenge is to see how to harness them for human purposes. Something like Rule 30, for example, turns out to be a really good randomness generator. Other simple programs are good models for processes in the natural or social world. And, for example, Wolfram Alpha and Mathematica are actually now full of algorithms that we discovered by searching the computational universe. And, for example, this — if we go back here — this has become surprisingly popular among composers finding musical forms by searching the computational universe. In a sense, we can use the computational universe to get mass customized creativity. I'm hoping we can, for example, use that even to get Wolfram Alpha to routinely do invention and discovery on the fly, and to find all sorts of wonderful stuff that no engineer and no process of incremental evolution would ever come up with. Well, so, that leads to kind of an ultimate question: Could it be that someplace out there in the computational universe we might find our physical universe? Perhaps there's even some quite simple rule, some simple program for our universe. Well, the history of physics would have us believe that the rule for the universe must be pretty complicated. But in the computational universe, we've now seen how rules that are incredibly simple can produce incredibly rich and complex behavior. So could that be what's going on with our whole universe? If the rules for the universe are simple, it's kind of inevitable that they have to be very abstract and very low level; operating, for example, far below the level of space or time, which makes it hard to represent things. But in at least a large class of cases, one can think of the universe as being like some kind of network, which, when it gets big enough, behaves like continuous space in much the same way as having lots of molecules can behave like a continuous fluid. Well, then the universe has to evolve by applying little rules that progressively update this network. And each possible rule, in a sense, corresponds to a candidate universe. Actually, I haven't shown these before, but here are a few of the candidate universes that I've looked at. Some of these are hopeless universes, completely sterile, with other kinds of pathologies like no notion of space, no notion of time, no matter, other problems like that. But the exciting thing that I've found in the last few years is that you actually don't have to go very far in the computational universe before you start finding candidate universes that aren't obviously not our universe. Here's the problem: Any serious candidate for our universe is inevitably full of computational irreducibility. Which means that it is irreducibly difficult to find out how it will really behave, and whether it matches our physical universe. A few years ago, I was pretty excited to discover that there are candidate universes with incredibly simple rules that successfully reproduce special relativity, and even general relativity and gravitation, and at least give hints of quantum mechanics. So, will we find the whole of physics? I don't know for sure, but I think at this point it's sort of almost embarrassing not to at least try. Not an easy project. One's got to build a lot of technology. One's got to build a structure that's probably at least as deep as existing physics. And I'm not sure what the best way to organize the whole thing is. Build a team, open it up, offer prizes and so on. But I'll tell you, here today, that I'm committed to seeing this project done, to see if, within this decade, we can finally hold in our hands the rule for our universe and know where our universe lies in the space of all possible universes ... and be able to type into Wolfram Alpha, ""the theory of the universe,"" and have it tell us. (Laughter) So I've been working on the idea of computation now for more than 30 years, building tools and methods and turning intellectual ideas into millions of lines of code and grist for server farms and so on. With every passing year, I realize how much more powerful the idea of computation really is. It's taken us a long way already, but there's so much more to come. From the foundations of science to the limits of technology to the very definition of the human condition, I think computation is destined to be the defining idea of our future. Thank you. (Applause) Chris Anderson: That was astonishing. Stay here. I've got a question. (Applause) So, that was, fair to say, an astonishing talk. Are you able to say in a sentence or two how this type of thinking could integrate at some point to things like string theory or the kind of things that people think of as the fundamental explanations of the universe? Stephen Wolfram: Well, the parts of physics that we kind of know to be true, things like the standard model of physics: what I'm trying to do better reproduce the standard model of physics or it's simply wrong. The things that people have tried to do in the last 25 years or so with string theory and so on have been an interesting exploration that has tried to get back to the standard model, but hasn't quite gotten there. My guess is that some great simplifications of what I'm doing may actually have considerable resonance with what's been done in string theory, but that's a complicated math thing that I don't yet know how it's going to work out. CA: Benoit Mandelbrot is in the audience. He also has shown how complexity can arise out of a simple start. Does your work relate to his? SW: I think so. I view Benoit Mandelbrot's work as one of the founding contributions to this kind of area. Benoit has been particularly interested in nested patterns, in fractals and so on, where the structure is something that's kind of tree-like, and where there's sort of a big branch that makes little branches and even smaller branches and so on. That's one of the ways that you get towards true complexity. I think things like the Rule 30 cellular automaton get us to a different level. In fact, in a very precise way, they get us to a different level because they seem to be things that are capable of complexity that's sort of as great as complexity can ever get ... I could go on about this at great length, but I won't. (Laughter) (Applause) CA: Stephen Wolfram, thank you. (Applause)"	我今天要談的是一個想法，很大的想法其實我認為這個想法終究會被視爲上個世紀最具有意義的想法那就是計算的想法當然，這想法已為我們帶來今日電腦科技上所有的成就等等但計算的想法其實並不止這些它實在很深入、很強又很基本我們才剛開始明白它的效應 我自己過去30年來進行了三個大型計劃認真研究關於計算的想法早年我是物理學家把電腦當作工具使用然後開始深入這個領域思考我想做的計算試圖找出建構那些計算的基本要素以及如何盡量自動化那些計算最後我創造出一個完整的架構建構在符號程式設計等等之上這讓我建構了Mathematica其後23年來加快速度將越來越多的想法和産能注入Mathematica我很高興能說許多好東西由此産生應用到研發和教育方面以及其他許多領域上我必須承認我建構Mathematica其實有個很自私的理由我自己想利用它有點像四百年前伽利略利用他的望遠鏡那樣但我並不想觀察天文的宇宙而是想觀察計算的宇宙 通常我們認爲程式是我們爲了特定的目的所建構出來的複雜東西可是所有可能的程式之空間又如何呢？這裡有個極簡單的程式之代表式如果跑這個程式得到的就是這個結果很簡單那麽稍稍改變這個程式的規則現在得到別的結果還是很簡單再改變一下看看結果稍微複雜了一點但如果讓它再跑一陣子結果看來雖然錯綜複雜但具有很規律的結構那麼問題是：還能產生出別的東西嗎？那麽來做個小小的實驗小小的數學實驗－試試看就知道 我們來跑某種特殊類型可能的所有程式此類程式叫細胞自動機這兒可看到許多不同的行爲表現大多只能做出很簡單的東西但逐一檢視所有這些圖片在規則30上可以看到開始發生有趣的情況那麼仔細看看在規則30這裡就在這裡程式跑的是底下這個很簡單的規則得到的可是如此驚人的東西這不是平常看得到的東西我必須說我第一次看到時它對我的直覺造成很大的震撼事實上要理解這東西我最後不得不創造一個嶄新的科學 （笑聲） 這個科學如果有所不同那就是比起我們300年來在數學基礎上建構的科學更為通泛這向來有如謎團大自然怎麼會如此輕鬆自如地產出那麼多看來如此複雜的東西我想我們已經找到其中的奧秘只要在計算空間裡進行採樣往往就會找到像規則30那樣的東西或像這樣的東西瞭解到這一點便可開始解釋許多長久以來的科學謎題但這也帶來新的問題比方說計算上的不可分解性我是說我們向來利用科學做預測但是像這樣的東西基本上是不可分解的要看到結果的唯一辦法只能是看著它演化下去它關係到我稱為「計算的等價」這個原則：也就是，即便是極其簡單的系統也能做出極其複雜的計算並不需要許多生物演化科技方能進行任意無常的計算就這樣自自然然地到處發生了具有這麼簡單規則的東西就行了這對於科學的極限具有深沉的暗示意涵對於像是生物演化過程或經濟的可預測及可控制性對於宇宙中的智識對於自由意志問題以及對科技的創造都有暗示意涵 研究這門科學多年我始終有個異想應用這門科學能有何等驚人之舉？打從孩提時代開始我便想把知識系統化將它化為可計算三百年前萊布尼茲也有這個異想但我原來的假設若要得到進展那根本就必須複製整個大腦我現在的想法是我這個科學思維隱含著不同的東西另外順道一提Mathematica現在具有龐大的計算能力我是執行長，擁有世界上的一些資源可以用來進行看似瘋狂的大型計劃因此我決定試看看外間世界到底有多少系統化的知識可以被轉化成能夠計算 這是一個很複雜的大計劃我原本也不確定是否可行不過我很高興這個計劃進行得不錯去年我們已經達到可以公布第一個網站版的Wolfram Alpha其目的是要成為嚴肅的知識引擎能計算出解答，有求必應那麼我們來試試看先從極為簡單的開始但願不會出糗很好，可以到目前為止還順利（笑聲）再試一下稍微困難的那麼...做點數學上的東西吧運氣好的話會有解答試試看能不能告訴我們一些有趣的東西關於與數學相關的東西我們可以提問真實世界的東西比方說－隨便提問－西班牙的國內生產毛額是多少？這應該還能告訴我們也可以計算與此相關的東西比方說西班牙的國內生產毛額除以－隨便舉例－嗯...就說除以微軟的營業額 （笑聲） 不管對問題有何想法重點是，想提什麼問題都可以輸入那麼試試看提個問題比方說與醫療保健相關的問題那麼比方說化驗室發現一位50歲男子低密度脂蛋白水平達140我們把這輸入Wolfram Alpha搜尋所有公共醫療的資料然後嘗試弄清楚哪部分人口符合這個情況等等或是試試看－隨便舉例－比方說國際太空站 這裡發生的是Wolfram Alpha不只查出東西還計算出，實時計算出太空站目前所在的位置，現在的位置你們看它計算得多快Wolfram Alpha知道許許多多種東西目前涵蓋已經相當廣泛你可能查找的所有東西全都在標準的參考資料庫裡但目標還在更遠的地方而且更廣泛地說就是要民主化所有的這類知識試圖在所有的領域中成為權威為人們所提的特定問題計算出解答這並不是去搜尋別人寫過的東西而是利用內建的知識為特定的問題計算出嶄新的解答 當然，Wolfram Alpha是一個龐然大物的長期計劃會遭遇到許許多多的挑戰首先必須張羅極大量的不同的事實與資料的來源我們為Mathematica建構相當強大的自動化安排還有人文領域的專家處理這方面問題但這只是開始而已有了原始事實或資料要真正回答問題還必須進行計算必須建構所有那些方法和模型以及演算式等等幾個世紀以來科學和其他領域所建構的東西即使以Mathematica為基礎開始也還是很大量的工作至今約有八百萬行的Mathematica編碼用在Wolfram Alpha裡由許許多多領域的專家所建構 Wolfram Alpha有一個關鍵性的想法那就是你可以隨興使用人類的語言提問那是說我們必須能夠解讀人們輸入的所有那些奇怪的言語還要明白意思我必須說我原本以為可能無法做到那個地步其間發生兩件重大的事第一件是在進行計算宇宙的研究中我們取得了大量語言學上的見解第二件是實現了擁有實際可計算的知識便會徹底改變人對語言理解的態度當然，現在Wolfram Alpha已經問世了我們能在實際使用中學習在Wolfram Alpha及其人類使用者之間實際上存在著有趣的相輔相成的互動演進這很令人振奮若此時看網站上的查詢80%以上在首次查詢就順利得到解答若再較之於Phone之類的應用這個百分比已可說相當大了因此我對此感到相當欣慰 不過在許多方面我們還在Wolfram Alpha的開端我是說一切都在順利進展之中我們越來越有信心Wolfram Alpha的科技指日可待會在越來越多的地方出現利用像網站上的這類資料也會利用私有的知識為個人和公司等等進行工作我實現了讓Wolfram Alpha真正給人嶄新的一種計算可稱之為以知識為基的計算這種計算不僅從原始的計算開始也從大量的內建知識開始進行若是如此則會實際改變計算結果交付的經濟表現無論是在網上或在其它地方 各位知道，我們目前有一個蠻有趣的情況在一方面，我們有Mathematica它使用精確的形式語言還有一個龐大的網絡具有經過仔細設計的能力能在極少行的編碼內做許多事讓大家看這裡的幾個例子這是Mathematica的一個趣味雅程式設計在這裡頭可以說我們融入了許多不同的能力就在這行編碼裡，我們創造了一個小小的使用者介面，讓我們能做出一點好玩的事若再仔細看看，那是稍微複雜些的程式－用來處理所有的演算並用來建構使用者介面等等但它是很精確的東西是一個用精確形式語言表達的精確指示讓Mathematica知道在此該做什麼 然後在另一方面，我們有Wolfram Alpha內建了世上的各式各樣紛亂以及人類語言等等那麼把這些東西放在一起會發生什麼呢？我認為這其實是很美妙的把Wolfram Alpha放到Mathematica裡就能做出精確的程式－比方說－用來調用真實世界的資料這兒有個簡單的實例這可以輸入不清晰的表述然後嘗試讓Wolfram Alpha弄清楚你說的是什麼試試看這個但其實我認為在這頂上最令人興奮的是它真的給予程式設計一個民主化的機會我是說誰都可用平常語言說出他們所要的然後－我們的想法是－Wolfram Alpha就能弄清楚確實是哪一段編碼能做到被要求做到的事情然後舉例讓使用者選擇他們所要的以便逐步建構越來越大的精確程式那麼，有時Wolfram Alpha可能馬上什麼都做好了回應出整個能用來計算的大型程式那麼，這兒是個大網站我們在這兒一直收集著許多教育性質的和其它許許多多種東西的示範那麼－隨便舉個例子－就這個好了這只是可計算之文件例子中的一個這可能是一段相當短的能放在這兒跑的Mathematica編碼 好，把它縮小吧那麼，有了的新科學就會有通泛的方法來建構科技嗎？那麼，我們一向利用物理材料來處理事物然後發現特殊的材料有助於達到特殊的科技目的等等結果發現在計算的空間裡我們也可以做到同樣的事那兒有取之不盡、用之不竭的程式挑戰則在於如何駕馭它們以達到人想要達到的目的比方說規則30這樣的東西真是個不錯的隨機產生器其它簡單的程式是不錯的模型用於處理自然世界或社群生活的事物又比方說Wolfram Alpha和Mathematica現今已充滿著演算式都是在計算空間裡搜尋得來的又比方說這個－我們回到這兒－這個在作曲者之間已經意外地大受歡迎搜尋計算空間，以便找到音樂形式在某種意義上是利用計算空間取得大量客製化的創造力我希望甚至能夠－比方說－利用它使Wolfram Alpha能利用套式快速地進行發明與發現並找到各種美妙的事物這不是任何工程師任何逐步演化的流程所能做到的 那麼，最終的問題是：我們有可能在計算空間的某處找到我們的物理宇宙嗎？也許我們的宇宙甚至有某種相當簡單的規則、相當簡單的程式然而，物理的歷史讓我們以為宇宙的規則肯定是相當複雜的但在計算的空間裡我們已經看到簡單得難以置信的規則也能產出難以置信的豐富又複雜的行為我們整個宇宙莫非不也是如此產生的嗎？如果宇宙的規則是簡單的那麼無可避免地必須是很抽象也很低層次的規則操作在－例如－遠低於空間或時間的層次之下這使得事物不容易表示但至少在某大類的情況下可以把宇宙想像為像是某種網絡那樣的東西只要大到足夠的程度其表現就會像是連綿的空間如同許多分子聚合在一起就會表現得像是不間斷的流體那麼，宇宙的演進必須通過應用小小的規則逐步更新這個網絡而每個可能的規則，某種意義上相當於一個候選的宇宙 其實，我以前還沒有展示過這些不過請看我已經檢視過的這一些候選的宇宙這些宇宙中有些毫無發展希望完全沒有繁衍能力因為帶有他類的病因：不具備空間或時間概念不含有物質、其它問題等等但我最近幾年發現最令人興奮的是是：其實不必深遠進入計算的空間便會開始找到一些候選的宇宙它們並不顯然不是我們的宇宙這裡有個問題：任何可嚴重考慮為我們的宇宙之候選者無可避免地會充滿計算上的不可分解性即是要弄清楚它的行為確切會是如何以及它是否符合我們的物理宇宙，這將會是無解的困難幾年前，我相當興奮地發現有些候選的宇宙具有難以置信的簡單規則它們成功地複製了狹義相對論甚至複製了廣義相對論和重力現象還至少提示了量子力學的物理原則那麼，我們會發現整個物理嗎？這我還不能確定但我認為在這個節骨眼上如果連試都不試，那就太不好意思了 這是不容易的計劃必須建構出大量的科技可能必須至少建構出像現有的物理那樣深入的結構我還不確定如何妥善組織這一切組織團隊、對外開放、提供獎金等等但我現在就可以告訴各位我決心投入實現這個計劃要看我們能否在這十年內終於將我們的宇宙的規則掌握在手中並得知我們的宇宙位於所有可能宇宙的空間中的何處也能將宇宙的理論輸入Wolfram Alpha讓它來告訴我們 （笑聲） 那麼，我研究計算的想法至今已經超過30年建構著工具和方法，並將心智思想化為幾百萬行的程式編碼以及強力的伺服器聯合場等等每過一個年我就越明白計算的想法實在有多麼強大它已經帶領著我們走過長長的道路但是還會有許許多多事情發生從科學的基礎到科技的極限到人類狀況的精確定義我認為計算註定會是定義著我們的未來之想法 謝謝大家聆聽 （喝彩） 克里斯•安德森：太令人驚訝了請留步，我有個問題請教 （喝彩） 必須老實說，這場演講太令人驚訝了您是否能用一兩句話說明如何能在某一個點上將這種想法融入像弦理論或人們所想的那些東西使它成為能夠解釋宇宙的基礎呢？ 史蒂芬•沃夫朗：嗯我們所知為真的那部分物理比方說物理的標準模型我試圖改善的是複製物理的標準模型或者說，錯的是大約近25年來人們試圖利用弦理論等等所做的研究都是很有趣的探討那樣的研究試圖回歸到標準模型但是並沒有達到理想我想我正在做的，若加以大大簡化實際上可能與弦理論裡所做的會有相當的共鳴不過那是很複雜的數學東西我還不知道它會達到怎樣的地步 克•安：貝諾特•曼德爾博特就在聽眾裡他也曾經演示如何從簡單的開始發展出複雜的東西您的研究和他的有些相關嗎？ 史•沃：我想是有的我看過曼德爾博特的著作他的著作可以說是開創這個領域研究的奠基著作之一貝諾特對套疊式模式對不規則碎片等等特別有興趣那種結構有點像樹的分叉結構而且有那種大枝分成小枝又甚至分成更細的小枝等等那是逐步達到真正複雜的一種方法我認為規則30那樣的細胞自動機把我們帶到一個不同的層次上事實上，此類規則確實把我們帶到不同的層次上因為它們顯然有繼續發展到極其複雜的能力那是複雜到不能再複雜的程度 ... 這點我還可以談很久，不過先到此為止了 克•安：史蒂夫•沃夫朗，謝謝您 （喝彩）
