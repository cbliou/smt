Talk	en	zh-tw
paul_rothemund_details_dna_folding	"So, people argue vigorously about the definition of life. They ask if it should have reproduction in it, or metabolism, or evolution. And I don't know the answer to that, so I'm not going to tell you. I will say that life involves computation. So this is a computer program. Booted up in a cell, the program would execute, and it could result in this person; or with a small change, it could result in this person; or another small change, this person; or with a larger change, this dog, or this tree, or this whale. So now, if you take this metaphor [of] genome as program seriously, you have to consider that Chris Anderson is a computer-fabricated artifact, as is Jim Watson, Craig Venter, as are all of us. And in convincing yourself that this metaphor is true, there are lots of similarities between genetic programs and computer programs that could help to convince you. But one, to me, that's most compelling is the peculiar sensitivity to small changes that can make large changes in biological development — the output. A small mutation can take a two-wing fly and make it a four-wing fly. Or it could take a fly and put legs where its antennae should be. Or if you're familiar with ""The Princess Bride,"" it could create a six-fingered man. Now, a hallmark of computer programs is just this kind of sensitivity to small changes. If your bank account's one dollar, and you flip a single bit, you could end up with a thousand dollars. So these small changes are things that I think that — they indicate to us that a complicated computation in development is underlying these amplified, large changes. So now, all of this indicates that there are molecular programs underlying biology, and it shows the power of molecular programs — biology does. And what I want to do is write molecular programs, potentially to build technology. And there are a lot of people doing this, a lot of synthetic biologists doing this, like Craig Venter. And they concentrate on using cells. They're cell-oriented. So my friends, molecular programmers, and I have a sort of biomolecule-centric approach. We're interested in using DNA, RNA and protein, and building new languages for building things from the bottom up, using biomolecules, potentially having nothing to do with biology. So, these are all the machines in a cell. There's a camera. There's the solar panels of the cell, some switches that turn your genes on and off, the girders of the cell, motors that move your muscles. My little group of molecular programmers are trying to refashion all of these parts from DNA. We're not DNA zealots, but DNA is the cheapest, easiest to understand and easy to program material to do this. And as other things become easier to use — maybe protein — we'll work with those. If we succeed, what will molecular programming look like? You're going to sit in front of your computer. You're going to design something like a cell phone, and in a high-level language, you'll describe that cell phone. Then you're going to have a compiler that's going to take that description and it's going to turn it into actual molecules that can be sent to a synthesizer and that synthesizer will pack those molecules into a seed. And what happens if you water and feed that seed appropriately, is it will do a developmental computation, a molecular computation, and it'll build an electronic computer. And if I haven't revealed my prejudices already, I think that life has been about molecular computers building electrochemical computers, building electronic computers, which together with electrochemical computers will build new molecular computers, which will build new electronic computers, and so forth. And if you buy all of this, and you think life is about computation, as I do, then you look at big questions through the eyes of a computer scientist. So one big question is, how does a baby know when to stop growing? And for molecular programming, the question is how does your cell phone know when to stop growing? (Laughter) Or how does a computer program know when to stop running? Or more to the point, how do you know if a program will ever stop? There are other questions like this, too. One of them is Craig Venter's question. Turns out I think he's actually a computer scientist. He asked, how big is the minimal genome that will give me a functioning microorganism? How few genes can I use? This is exactly analogous to the question, what's the smallest program I can write that will act exactly like Microsoft Word? (Laughter) And just as he's writing, you know, bacteria that will be smaller, he's writing genomes that will work, we could write smaller programs that would do what Microsoft Word does. But for molecular programming, our question is, how many molecules do we need to put in that seed to get a cell phone? What's the smallest number we can get away with? Now, these are big questions in computer science. These are all complexity questions, and computer science tells us that these are very hard questions. Almost — many of them are impossible. But for some tasks, we can start to answer them. So, I'm going to start asking those questions for the DNA structures I'm going to talk about next. So, this is normal DNA, what you think of as normal DNA. It's double-stranded, it's a double helix, has the As, Ts, Cs and Gs that pair to hold the strands together. And I'm going to draw it like this sometimes, just so I don't scare you. We want to look at individual strands and not think about the double helix. When we synthesize it, it comes single-stranded, so we can take the blue strand in one tube and make an orange strand in the other tube, and they're floppy when they're single-stranded. You mix them together and they make a rigid double helix. Now for the last 25 years, Ned Seeman and a bunch of his descendants have worked very hard and made beautiful three-dimensional structures using this kind of reaction of DNA strands coming together. But a lot of their approaches, though elegant, take a long time. They can take a couple of years, or it can be difficult to design. So I came up with a new method a couple of years ago I call DNA origami that's so easy you could do it at home in your kitchen and design the stuff on a laptop. But to do it, you need a long, single strand of DNA, which is technically very difficult to get. So, you can go to a natural source. You can look in this computer-fabricated artifact, and he's got a double-stranded genome — that's no good. You look in his intestines. There are billions of bacteria. They're no good either. Double strand again, but inside them, they're infected with a virus that has a nice, long, single-stranded genome that we can fold like a piece of paper. And here's how we do it. This is part of that genome. We add a bunch of short, synthetic DNAs that I call staples. Each one has a left half that binds the long strand in one place, and a right half that binds it in a different place, and brings the long strand together like this. The net action of many of these on that long strand is to fold it into something like a rectangle. Now, we can't actually take a movie of this process, but Shawn Douglas at Harvard has made a nice visualization for us that begins with a long strand and has some short strands in it. And what happens is that we mix these strands together. We heat them up, we add a little bit of salt, we heat them up to almost boiling and cool them down, and as we cool them down, the short strands bind the long strands and start to form structure. And you can see a little bit of double helix forming there. When you look at DNA origami, you can see that what it really is, even though you think it's complicated, is a bunch of double helices that are parallel to each other, and they're held together by places where short strands go along one helix and then jump to another one. So there's a strand that goes like this, goes along one helix and binds — it jumps to another helix and comes back. That holds the long strand like this. Now, to show that we could make any shape or pattern that we wanted, I tried to make this shape. I wanted to fold DNA into something that goes up over the eye, down the nose, up the nose, around the forehead, back down and end in a little loop like this. And so, I thought, if this could work, anything could work. So I had the computer program design the short staples to do this. I ordered them; they came by FedEx. I mixed them up, heated them, cooled them down, and I got 50 billion little smiley faces floating around in a single drop of water. And each one of these is just one-thousandth the width of a human hair, OK? So, they're all floating around in solution, and to look at them, you have to get them on a surface where they stick. So, you pour them out onto a surface and they start to stick to that surface, and we take a picture using an atomic-force microscope. It's got a needle, like a record needle, that goes back and forth over the surface, bumps up and down, and feels the height of the first surface. It feels the DNA origami. There's the atomic-force microscope working and you can see that the landing's a little rough. When you zoom in, they've got, you know, weak jaws that flip over their heads and some of their noses get punched out, but it's pretty good. You can zoom in and even see the extra little loop, this little nano-goatee. Now, what's great about this is anybody can do this. And so, I got this in the mail about a year after I did this, unsolicited. Anyone know what this is? What is it? It's China, right? So, what happened is, a graduate student in China, Lulu Qian, did a great job. She wrote all her own software to design and built this DNA origami, a beautiful rendition of China, which even has Taiwan, and you can see it's sort of on the world's shortest leash, right? (Laughter) So, this works really well and you can make patterns as well as shapes, OK? And you can make a map of the Americas and spell DNA with DNA. And what's really neat about it — well, actually, this all looks like nano-artwork, but it turns out that nano-artwork is just what you need to make nano-circuits. So, you can put circuit components on the staples, like a light bulb and a light switch. Let the thing assemble, and you'll get some kind of a circuit. And then you can maybe wash the DNA away and have the circuit left over. So, this is what some colleagues of mine at Caltech did. They took a DNA origami, organized some carbon nano-tubes, made a little switch, you see here, wired it up, tested it and showed that it is indeed a switch. Now, this is just a single switch and you need half a billion for a computer, so we have a long way to go. But this is very promising because the origami can organize parts just one-tenth the size of those in a normal computer. So it's very promising for making small computers. Now, I want to get back to that compiler. The DNA origami is a proof that that compiler actually works. So, you start with something in the computer. You get a high-level description of the computer program, a high-level description of the origami. You can compile it to molecules, send it to a synthesizer, and it actually works. And it turns out that a company has made a nice program that's much better than my code, which was kind of ugly, and will allow us to do this in a nice, visual, computer-aided design way. So, now you can say, all right, why isn't DNA origami the end of the story? You have your molecular compiler, you can do whatever you want. The fact is that it does not scale. So if you want to build a human from DNA origami, the problem is, you need a long strand that's 10 trillion trillion bases long. That's three light years' worth of DNA, so we're not going to do this. We're going to turn to another technology, called algorithmic self-assembly of tiles. It was started by Erik Winfree, and what it does, it has tiles that are a hundredth the size of a DNA origami. You zoom in, there are just four DNA strands and they have little single-stranded bits on them that can bind to other tiles, if they match. And we like to draw these tiles as little squares. And if you look at their sticky ends, these little DNA bits, you can see that they actually form a checkerboard pattern. So, these tiles would make a complicated, self-assembling checkerboard. And the point of this, if you didn't catch that, is that tiles are a kind of molecular program and they can output patterns. And a really amazing part of this is that any computer program can be translated into one of these tile programs — specifically, counting. So, you can come up with a set of tiles that when they come together, form a little binary counter rather than a checkerboard. So you can read off binary numbers five, six and seven. And in order to get these kinds of computations started right, you need some kind of input, a kind of seed. You can use DNA origami for that. You can encode the number 32 in the right-hand side of a DNA origami, and when you add those tiles that count, they will start to count — they will read that 32 and they'll stop at 32. So, what we've done is we've figured out a way to have a molecular program know when to stop going. It knows when to stop growing because it can count. It knows how big it is. So, that answers that sort of first question I was talking about. It doesn't tell us how babies do it, however. So now, we can use this counting to try and get at much bigger things than DNA origami could otherwise. Here's the DNA origami, and what we can do is we can write 32 on both edges of the DNA origami, and we can now use our watering can and water with tiles, and we can start growing tiles off of that and create a square. The counter serves as a template to fill in a square in the middle of this thing. So, what we've done is we've succeeded in making something much bigger than a DNA origami by combining DNA origami with tiles. And the neat thing about it is, is that it's also reprogrammable. You can just change a couple of the DNA strands in this binary representation and you'll get 96 rather than 32. And if you do that, the origami's the same size, but the resulting square that you get is three times bigger. So, this sort of recapitulates what I was telling you about development. You have a very sensitive computer program where small changes — single, tiny, little mutations — can take something that made one size square and make something very much bigger. Now, this — using counting to compute and build these kinds of things by this kind of developmental process is something that also has bearing on Craig Venter's question. So, you can ask, how many DNA strands are required to build a square of a given size? If we wanted to make a square of size 10, 100 or 1,000, if we used DNA origami alone, we would require a number of DNA strands that's the square of the size of that square; so we'd need 100, 10,000 or a million DNA strands. That's really not affordable. But if we use a little computation — we use origami, plus some tiles that count — then we can get away with using 100, 200 or 300 DNA strands. And so we can exponentially reduce the number of DNA strands we use, if we use counting, if we use a little bit of computation. And so computation is some very powerful way to reduce the number of molecules you need to build something, to reduce the size of the genome that you're building. And finally, I'm going to get back to that sort of crazy idea about computers building computers. If you look at the square that you build with the origami and some counters growing off it, the pattern that it has is exactly the pattern that you need to make a memory. So if you affix some wires and switches to those tiles — rather than to the staple strands, you affix them to the tiles — then they'll self-assemble the somewhat complicated circuits, the demultiplexer circuits, that you need to address this memory. So you can actually make a complicated circuit using a little bit of computation. It's a molecular computer building an electronic computer. Now, you ask me, how far have we gotten down this path? Experimentally, this is what we've done in the last year. Here is a DNA origami rectangle, and here are some tiles growing from it. And you can see how they count. One, two, three, four, five, six, nine, 10, 11, 12, 17. So it's got some errors, but at least it counts up. (Laughter) So, it turns out we actually had this idea nine years ago, and that's about the time constant for how long it takes to do these kinds of things, so I think we made a lot of progress. We've got ideas about how to fix these errors. And I think in the next five or 10 years, we'll make the kind of squares that I described and maybe even get to some of those self-assembled circuits. So now, what do I want you to take away from this talk? I want you to remember that to create life's very diverse and complex forms, life uses computation to do that. And the computations that it uses, they're molecular computations, and in order to understand this and get a better handle on it, as Feynman said, you know, we need to build something to understand it. And so we are going to use molecules and refashion this thing, rebuild everything from the bottom up, using DNA in ways that nature never intended, using DNA origami, and DNA origami to seed this algorithmic self-assembly. You know, so this is all very cool, but what I'd like you to take from the talk, hopefully from some of those big questions, is that this molecular programming isn't just about making gadgets. It's not just making about — it's making self-assembled cell phones and circuits. What it's really about is taking computer science and looking at big questions in a new light, asking new versions of those big questions and trying to understand how biology can make such amazing things. Thank you. (Applause)"	人們一直在激烈地爭論著生命的定義。他們詢問繁殖、代謝、演化，是否是所有生命共有的特徵。因為我不知道這個問題的答案，所以我不會給你們任何解答。我會說，生命跟計算有關。所以這是一個電腦程式。待細胞開機後，這個程式會執行並產生了這個人稍微做點變化，也許產生的是這個人 —再做點改變 — 變成了這個人，做大一點的變化，變成這隻狗或者樹或者鯨魚。 如果你認真看待基因體是程式這個比喻，你會認為 Chris Anderson是一個電腦製成的物品，詹姆士•華生跟克萊格•凡特也是，我們都是。為了說服你自己這個比喻是真的，基因程式與電腦程式間極多的相似之處也許能夠使你相信這是真的。但是對我來說最令人信服的是他們都對於細微的改變極其敏感這改變對於生物發展的結果可以非常的大。一個小突變可以讓本來只有一對翅膀的蒼蠅生出兩對翅膀。或者它可以讓蒼蠅本來長觸角的地方生出腿來。或者你對電影「公主新娘」比較熟悉，(或譯:綠野芳蹤)它能夠使人生出六隻手指。 而電腦程式的特徵也不過就是這種對於細微改變的靈敏度。如果在你一塊錢的銀行帳號中就更動一個位元而已，你就有了一千元。這些小變化使我認為— 它們告訴我們演化之中發生的複雜運算都埋藏在這些被放大的差異中。 所有的這些都顯示著生物的裡層其實埋藏著分子程式，而生物現象其實就是這些分子程式威力的展現。而我想要做的事就是撰寫這些有潛力能用來建造科技的分子程式。現在有很多人在做這方面的研究，很多合成生物學家正在做這些研究，如：克萊格•凡特他們大多專注在利用細胞。他們是細胞導向的。但是我的朋友們和我，我們這些分子程式設計師有著不同的生物分子中心途徑。我們著迷於利用 DNA, RNA 和蛋白質來建造能從基礎用來建造東西的新程式語言，只是利用這些生物分子們，可能跟生物一點關係都沒有。這些都是細胞內的微機械。這是攝影機。這是細胞裡的太陽能板，某些用來控制基因的開關，細胞的樑柱，運動肌肉的馬達。我的分子程式設計小組試圖利用 DNA 來重製這些零件。我們不是 DNA 狂熱分子，但是 DNA 是最便宜，最容易了解，最容易用來設計程式的物質。如果當其他東西變得更容易使用 —也許是蛋白質 — 我們將會轉而使用它們。 如果我們成功了，分子程式設計看起來會是什麼樣子？你將會坐在你的電腦前面。你會要設計一些類似手機的東西，要使用高階語言來描述這個手機。然後你將會需要一個編譯器它將會把這些描述轉變成真正的分子送到合成儀去製造而合成儀會將這些分子打包成一顆種子。然後如果你善加施肥，澆水，妥善地照顧這顆種子，它將會開始進行發育計算，一種分子計算，然後它將會建造出一部電子計算機。如果我的成見還表現得不夠明顯，我一直認為生命就是分子計算機然後建造電子化學計算機再建造電子計算機然後電子計算機跟電子化學計算機又一起，建造出新的分子計算機它又將會造出新的電子計算機，如此這般，不斷循環。 如果你相信這些我所說的，你就會相信一切生命都跟計算有關，就像我一樣。然後你就會以電腦科學家的觀點來思考重要的問題。其中一個重要問題是，嬰兒如何知道何時該停止成長？做為一個分子程式設計師，問題變成你的手機如何知道何時該停止生長？（笑聲）或者是電腦程式如何知道何時該停止運作？或者更重要的是，你如何知道一個程式會不會停止？也還有許多其它類似的問題。其中一個是克萊格•凡特的問題。其實我認為他事實上是一個電腦科學家。他問到：最小的基因體可以小到什麼程度而仍然可以支持一個微生物的存在與運作？最少可以使用多少基因？這裡有一個與此問題完全類比的例子，我所能寫出的功能與微軟 Word一模一樣的程式最小能有多小？（笑聲）就像他的文章一樣，你知道的，細菌將會再小一點，他正在寫能夠實現這個目標的基因體，我們可以寫出比微軟 Word 小的程式但是功能與其一模一樣。 但是作為一個分子程式設計師，我們的問題是，如果我們需要那顆種子長成一隻手機，需要放多少分子於其中？能夠完成任務的最小數量是多少？現在，這些是電腦科學領域的大問題。這些都是複雜的問題並且電腦科學告訴我們這些問題非常困難。幾乎 — 它們中有許多是不可能回答的。但是我們已經可以開始回答其中部份的問題。現在，我將開始告訴你們關於接下來我將會提到的關於 DNA 結構的問題。這是正常的 DNA，提到普通的 DNA 你會想到什麼？雙股雙螺旋結構，有一堆 A, T, C, G 互相配對使雙股結合在一起。有的時候我們會把它畫成這個樣子，將其簡化使大家容易接受。我們不希望總是顧慮到雙螺旋結構，相反地我們希望把它們看成獨立的兩股。當我們合成它時，它變成單股的結構，所以我們可以在一支試管內放入藍股另一支中放入橘股當它們是單股結構時它們非常的鬆軟。但如果你將它們混合在一起，它們就會形成堅固的雙螺旋結構。在過去的 25 年裡，Ned Seeman 和他的一群後繼者們非常辛勤的工作著並已經成功使用這種 DNA 雙股會靠在一起這種反應建立了美妙的三維立體構造。但是很多他們所使用的方法，雖然優雅，可是耗時太長。有時這個時間可以長達數年，有時甚至無法設計出來。 因此數年前我發明了一個新的方法，我稱之為 DNA 摺疊術，這非常的簡單，你甚至可以用你的筆記型電腦設計出來後在你自己家裡面的廚房完成它。但是你需要一段長股 DNA 來當作材料，而這個材料在技術上不容易取得。你可以從自然資源下手尋找。你可以在這個電腦製成的物品中尋找但是他所擁有的是對我們無用的雙股基因體。再往他的內臟尋找。那邊有幾十億的細菌。可是牠們也對我們無用。也是雙股的，但是，在牠們體內，牠們被一些病毒感染了。這就是我們所要找的一長段單股基因體，我們可以將其當成一張紙一般的摺疊，我們是這樣做的。 這是那個基因體的一部分。我們加入一堆我稱之為「釘書針」的短股合成 DNA 分子。每一個的左邊可以與長股的某處相結合，而右邊會與另一處結合然後將長股像這樣摺疊在一起。許多這些「釘書針」對於長股的淨效應就是將之摺疊成類似長方形的形狀。 現在，我們技術上還沒辦法將這個步驟拍攝成影片，但是哈佛的 Shawn Douglas幫我們做了一個漂亮的動畫它從一個包含部份短股的長股結構開始。當我們開始混合這些 DNA 的時候。我們將之加熱，加入一點點鹽，將他們加熱到近乎沸騰然後冷卻他們，當我們冷卻它們的時候，這些短股會和長股結合並開始形成結構性的排列你可以看到這邊有一小部份雙螺旋結構的形成。當你研究 DNA 摺疊術的時候，你可以發現它其實是 —最算你認為它很複雜 —一堆彼此平行排列在一起的雙螺旋結構他們彼此間藉由短股一端形成一個雙螺旋，另一端在遠處形成另一個而緊密結合在一起。所以就會有這樣的情形發生，結合成一段雙螺旋結構 —再跨越到另一段雙螺旋然後折返，使長股形成這樣的形狀。 為了顯示我們可以製造任何我們所要的形狀或圖案，我做了這個形狀。我想要將 DNA 往上順著眼睛摺疊，再下來鼻子，之後順著鼻子上爬，在額頭盤旋之後，往下回來最後形成一個像這樣的小圈圈。我認為如果能夠辦到這個，任何圖案都能辦到。所以我讓電腦程式來設計這些將要用到的短股「釘書針」。我訂製了它們，藉由 FedEx 送到了我的手上。我將它們混合，加熱，然後冷卻，最後我在一滴水中就可以得到約五百億個這些可愛的笑臉。你知道嗎？每一個笑臉只有一根人類頭髮寬度的千分之一大小。 因此它們全部都在溶液中漂浮著，為了觀察它們，你必須讓它們貼伏在一個平面上。所以你將它們潑撒到一個平面上它們開始平貼在平面上，然後我們使用原子力顯微鏡來照相原子力顯微鏡有一個如同唱針一般的探測針，這隻探測針在平面上來來回回地掃描，並且藉由探針得知平面的高低起伏及凹凸處。它能偵測到 DNA 摺疊的成果。這就是原子力顯微鏡使用中的情形你可以看到這個平面有點粗糙。當你放大觀看，你知道，它們之中有些下顎翻轉與額頭重疊在一起有些鼻子掉了出來，但是大體來說，成果非常好。你放大後甚至可以觀察到這個多出來的小圈圈，這個奈米等級的山羊鬚。 最棒的是，任何人都可以完成這個實驗。在我成功之後約一年，我收到一封不請自來的信件。有任何人可以猜到這是什麼嗎？是什麼？這是中國，對吧？事情是這樣的，一個在中國的研究生，Lulu Qian，做得很好。她開發出她自己用來設計跟製造這個 DNA 摺疊品的軟體，一個漂亮的中國示意圖，甚至連台灣都在裡面，你也可以看到兩岸間那條可稱為世界上最短的繩索，對吧？（笑聲）這運作得非常好除了形狀你也可以製造圖案，對吧？所以你可以繪製美洲地圖或是用 DNA 拼寫出「DNA」。 更棒的是 —這麼嘛，它們都看起來像奈米藝術，但是這個奈米藝術剛剛好可以用來製造奈米電路。所以你可以將電路零件加入「釘書針」上，好比燈泡及開關。然後讓它們自己組合，你就會得到某種電路。然後也許你可以將 DNA 洗除，只留下電路。這就是我在加州理工大學一些同事們的研究。他們將 DNA 摺疊術與一些奈米碳管結合，製造出小開關，你在這邊可以看到，通上電，測試後證明它是一個真正的開關。這只是一個開關你需要上億個開關才能做出一個電腦，因此我們還有很長一段路要走。但是這個前景是非常真實的因為利用這個方法可以做出比目前體積小十倍的電子零件而我們可以利用這些零件來製造電腦。因此製造出小電腦是非常可行的。 現在我們回來談談編譯器。DNA 摺疊術就是編譯器運作良好的強力證明。你可以在電腦上嘗試製作任何東西。你會得到電腦程式的高階描述，關於摺疊術的高階描述。你將之編譯成真正的分子，送到合成器去合成然後成功的運作。結果是已經有公司開發出了一個好程式比起我有點破爛的程式碼來說要好得多了，並且可以讓我們在電腦輔助設計的良好視覺環境下來完成這個工作。 現在，也許你會問，好吧，為什麼 DNA 摺疊術不是所有問題的解答？你已經有了分子編譯器，你能做任何事。答案是因為它不能放大量產。因此如果你想要用 DNA 摺疊術來建造一個人，你將會需要一股超級長大約要十兆兆個核酸這麼長的 DNA。這段 DNA 將會長達三個光年，所以我們不打算這麼做。我們打算將之轉換成另一種科技形式稱之為模塊演算自我組合。這想法是由 Erik Winfree 所提出的，這個概念是這樣的，我們使用約一般 DNA 摺疊品百分之一大小的模塊。當你將它們放大顯示來看其實就是四段短股 DNA在其上有單股短鏈的存在可以用來與其他互補的模塊結合。通常我們喜歡將這些模塊以小正方形顯示。如果你觀察它們上面的短股互補 DNA 鏈，你會發現它們可以形成棋盤格的排列。所以這些模塊可以形成能自我排列組合的複雜棋盤格。重點是，如果你沒有跟上的話，這些模塊可以是分子程式而且它們可以輸出圖案。這其中最美妙的一部份是任何電腦程式都可以被轉譯為這些模塊程式 — 舉例來說，計數。你可以設計一組模塊當它們在一起的時候，形成一個二進位計數器而不是形成棋盤格。所以你可以讀出二進位數字 5, 6 和 7。 為了能使這種計算成功開始，你需要某種輸入方法，某種「種子」。你可以使用 DNA 摺疊術來做到。你可以將數字 32 加密到DNA 摺疊品的右邊然後當你加入這些能夠計數的模塊後，它們會開始計數，一直數到 32 為止然後它們就會停下來。因此，我們所做的是我們找到了一種方法能使分子程式知道何時該停止成長。因為它能計數所以它知道何時該停。它知道它有多大。這大致上回答了我所提到的第一個問題。雖然它沒有告訴我們嬰兒是如何做到的。 現在，我們可以使用這個計數功能來嘗試更大的計畫只使用 DNA 摺疊術無法完成的計畫。這裡是一個 DNA 摺疊品，我們可以做的是我們將其兩邊都寫上數字 32然後我們可以使用我們的灑水壺把模塊澆在DNA摺疊品上，然後我們會見到模塊依附其生長最後成為一個正方形。計數器的功用如同模板將正方形內塞滿這種東西。最後我們成功的完成了為了讓DNA摺疊術能夠製造出更大的東西，必須還要結合模塊更好的是，它也是可以輕易變更的程式設計。你只要更改與二進位表示有關的數股 DNA你就能將 32 改為 96。如果你重複同樣大小的 DNA 摺疊，你所得到的結果是一個單邊三倍大的正方形。 這大概摘要了目前我所告訴你們有關發展的重點。你有一個非常靈敏的電腦程式一些小變化 — 單一、微小、細微的突變 —可以使從相同大小方塊製造的東西變得大得多。現在，這個使用計數來計算並且製造這樣子的東西而且使用這種開發流程跟克萊格•凡特的問題也是互相關連的。你可以問，多少數量的 DNA 短股是建造一個指定大小的正方形所必須的？假設我們想要製作尺寸 10, 100 或 1000 的正方形，如果我們只使用 DNA 摺疊術，我們將會需要正方形尺寸大小平方數量的短股 DNA，也就是我們需要分別一百、一萬、一百萬個短股 DNA。這是非常不可行的方法。但是如果我們使用一些計算方法 —我們同時使用 DNA 摺疊術與會計數的模塊 —這樣我們就只需要分別使用 100, 200 跟 300 個短股 DNA 就行了。這樣我們可以大量地減少我們所需使用的短股 DNA只要我們使用計數方法，使用一點點數學計算。因此計算是一個威力強大的方法可以減少你建造物品所需要的分子數量，減少你所建造的基因體大小。 最後，我要回到這聽起來瘋狂的想法那就是由電腦建造電腦。如果你研究你用 DNA 摺疊術所建造的正方形和從之成長出來的計數器，它所擁有的圖案跟你需要用來建造記憶體所需要的圖案一模一樣。所以如果你在這些模塊上加上電線和開關，你將它們加在模塊上而不是之前提過的加在結合 DNA 短股上，然後它們就會自我組合成為一個有點複雜的電路 —一個記憶體所需要的非多功電路器。你可以真正的製造一個複雜的電路只需要用上一點點計算。這就是分子計算器製造電子計算器。如果你問我，我們在這個方向的進展如何？實驗上來說，這就是我們去年的成果。這是一個 DNA 摺疊出來的長方形，一些模塊從其上長出來。你可以看到它們計數的情況。一、二、三、四、五、六、九、十、11, 12, 17。所以，有一些錯誤產生，但至少它能繼續數上去。（笑聲） 事實上，我們九年前就已經有這個想法了，所以這大概就是完成這種事所需要的固定時間我認為我們進步顯著。我們已經有了如何修正這些錯誤的想法。我相信在未來的五到十年內，我們能夠建造出我所描述的這種正方形甚至是一些這些自我組合的電路。 現在，這場演講後，我希望你們記得什麼？我希望你們能夠記得為了能夠建造生命這種極端歧異複雜的形體，生命使用了計算來完成。祂所使用的計算，是分子層次的計算，為了能夠了解它的原理並能夠更好的控制它，就像費曼說的，你知道的，為了真正了解事物，我們必須親身建造之。因此我們將要使用分子來重新設計這個東西，從基礎開始重建所有事物，用一種自然從來沒有想過的方式來使用 DNA，使用 DNA 摺疊術，用 DNA 摺疊術來做為自我組合演算的種子。 你能想像，這一切都非常吸引人，但是我真正希望你們這場演講後記得的是，希望是這些重大問題之一，就是分子程式設計不是只跟建造小工具有關。不是只是建造關於 —自我組合的手機或是電路。它的真正意義是為電腦科學還有探究重要的問題帶來一線曙光，詢問更新版本的重要問題並試圖了解生物為何能夠做出這麼驚人美妙的東西。謝謝你們。(掌聲)
