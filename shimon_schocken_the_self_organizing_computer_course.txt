Talk	en	zh-tw
shimon_schocken_the_self_organizing_computer_course	"So, this is my grandfather, Salman Schocken, who was born into a poor and uneducated family with six children to feed, and when he was 14 years old, he was forced to drop out of school in order to help put bread on the table. He never went back to school. Instead, he went on to build a glittering empire of department stores. Salman was the consummate perfectionist, and every one of his stores was a jewel of Bauhaus architecture. He was also the ultimate self-learner, and like everything else, he did it in grand style. He surrounded himself with an entourage of young, unknown scholars like Martin Buber and Shai Agnon and Franz Kafka, and he paid each one of them a monthly salary so that they could write in peace. And yet, in the late '30s, Salman saw what's coming. He fled Germany, together with his family, leaving everything else behind. His department stores confiscated, he spent the rest of his life in a relentless pursuit of art and culture. This high school dropout died at the age of 82, a formidable intellectual, cofounder and first CEO of the Hebrew University of Jerusalem, and founder of Schocken Books, an acclaimed imprint that was later acquired by Random House. Such is the power of self-study. And these are my parents. They too did not enjoy the privilege of college education. They were too busy building a family and a country. And yet, just like Salman, they were lifelong, tenacious self-learners, and our home was stacked with thousands of books, records and artwork. I remember quite vividly my father telling me that when everyone in the neighborhood will have a TV set, then we'll buy a normal F.M. radio. (Laughter) And that's me, I was going to say holding my first abacus, but actually holding what my father would consider an ample substitute to an iPad. (Laughter) So one thing that I took from home is this notion that educators don't necessarily have to teach. Instead, they can provide an environment and resources that tease out your natural ability to learn on your own. Self-study, self-exploration, self-empowerment: these are the virtues of a great education. So I'd like to share with you a story about a self-study, self-empowering computer science course that I built, together with my brilliant colleague Noam Nisan. As you can see from the pictures, both Noam and I had an early fascination with first principles, and over the years, as our knowledge of science and technology became more sophisticated, this early awe with the basics has only intensified. So it's not surprising that, about 12 years ago, when Noam and I were already computer science professors, we were equally frustrated by the same phenomenon. As computers became increasingly more complex, our students were losing the forest for the trees, and indeed, it is impossible to connect with the soul of the machine if you interact with a black box P.C. or a Mac which is shrouded by numerous layers of closed, proprietary software. So Noam and I had this insight that if we want our students to understand how computers work, and understand it in the marrow of their bones, then perhaps the best way to go about it is to have them build a complete, working, general-purpose, useful computer, hardware and software, from the ground up, from first principles. Now, we had to start somewhere, and so Noam and I decided to base our cathedral, so to speak, on the simplest possible building block, which is something called NAND. It is nothing more than a trivial logic gate with four input-output states. So we now start this journey by telling our students that God gave us NAND — (Laughter) — and told us to build a computer, and when we asked how, God said, ""One step at a time."" And then, following this advice, we start with this lowly, humble NAND gate, and we walk our students through an elaborate sequence of projects in which they gradually build a chip set, a hardware platform, an assembler, a virtual machine, a basic operating system and a compiler for a simple, Java-like language that we call ""JACK."" The students celebrate the end of this tour de force by using JACK to write all sorts of cool games like Pong, Snake and Tetris. You can imagine the tremendous joy of playing with a Tetris game that you wrote in JACK and then compiled into machine language in a compiler that you wrote also, and then seeing the result running on a machine that you built starting with nothing more than a few thousand NAND gates. It's a tremendous personal triumph of going from first principles all the way to a fantastically complex and useful system. Noam and I worked five years to facilitate this ascent and to create the tools and infrastructure that will enable students to build it in one semester. And this is the great team that helped us make it happen. The trick was to decompose the computer's construction into numerous stand-alone modules, each of which could be individually specified, built and unit-tested in isolation from the rest of the project. And from day one, Noam and I decided to put all these building blocks freely available in open source on the Web. So chip specifications, APIs, project descriptions, software tools, hardware simulators, CPU emulators, stacks of hundreds of slides, lectures — we laid out everything on the Web and invited the world to come over, take whatever they need, and do whatever they want with it. And then something fascinating happened. The world came. And in short order, thousands of people were building our machine. And NAND2Tetris became one of the first massive, open, online courses, although seven years ago we had no idea that what we were doing is called MOOCs. We just observed how self-organized courses were kind of spontaneously spawning out of our materials. For example, Pramode C.E., an engineer from Kerala, India, has organized groups of self-learners who build our computer under his good guidance. And Parag Shah, another engineer, from Mumbai, has unbundled our projects into smaller, more manageable bites that he now serves in his pioneering do-it-yourself computer science program. The people who are attracted to these courses typically have a hacker mentality. They want to figure out how things work, and they want to do it in groups, like this hackers club in Washington, D.C., that uses our materials to offer community courses. And because these materials are widely available and open-source, different people take them to very different and unpredictable directions. For example, Yu Fangmin, from Guangzhou, has used FPGA technology to build our computer and show others how to do the same using a video clip, and Ben Craddock developed a very nice computer game that unfolds inside our CPU architecture, which is quite a complex 3D maze that Ben developed using the Minecraft 3D simulator engine. The Minecraft community went bananas over this project, and Ben became an instant media celebrity. And indeed, for quite a few people, taking this NAND2Tetris pilgrimage, if you will, has turned into a life-changing experience. For example, take Dan Rounds, who is a music and math major from East Lansing, Michigan. A few weeks ago, Dan posted a victorious post on our website, and I'd like to read it to you. So here's what Dan said. ""I did the coursework because understanding computers is important to me, just like literacy and numeracy, and I made it through. I never worked harder on anything, never been challenged to this degree. But given what I now feel capable of doing, I would certainly do it again. To anyone considering NAND2Tetris, it's a tough journey, but you'll be profoundly changed."" So Dan demonstrates the many self-learners who take this course off the Web, on their own traction, on their own initiative, and it's quite amazing because these people cannot care less about grades. They are doing it because of one motivation only. They have a tremendous passion to learn. And with that in mind, I'd like to say a few words about traditional college grading. I'm sick of it. We are obsessed with grades because we are obsessed with data, and yet grading takes away all the fun from failing, and a huge part of education is about failing. Courage, according to Churchill, is the ability to go from one defeat to another without losing enthusiasm. (Laughter) And [Joyce] said that mistakes are the portals of discovery. And yet we don't tolerate mistakes, and we worship grades. So we collect your B pluses and your A minuses and we aggregate them into a number like 3.4, which is stamped on your forehead and sums up who you are. Well, in my opinion, we went too far with this nonsense, and grading became degrading. So with that, I'd like to say a few words about upgrading, and share with you a glimpse from my current project, which is different from the previous one, but it shares exactly the same characteristics of self-learning, learning by doing, self-exploration and community-building, and this project deals with K-12 math education, beginning with early age math, and we do it on tablets because we believe that math, like anything else, should be taught hands on. So here's what we do. Basically, we developed numerous mobile apps, every one of them explaining a particular concept in math. So for example, let's take area. When you deal with a concept like area — well, we also provide a set of tools that the child is invited to experiment with in order to learn. So if area is what interests us, then one thing which is natural to do is to tile the area of this particular shape and simply count how many tiles it takes to cover it completely. And this little exercise here gives you a first good insight of the notion of area. Moving along, what about the area of this figure? Well, if you try to tile it, it doesn't work too well, does it. So instead, you can experiment with these different tools here by some process of guided trial and error, and at some point you will discover that one thing that you can do among several legitimate transformations is the following one. You can cut the figure, you can rearrange the parts, you can glue them and then proceed to tile just like we did before. (Applause) Now this particular transformation did not change the area of the original figure, so a six-year-old who plays with this has just discovered a clever algorithm to compute the area of any given parallelogram. We don't replace teachers, by the way. We believe that teachers should be empowered, not replaced. Moving along, what about the area of a triangle? So after some guided trial and error, the child will discover, with or without help, that he or she can duplicate the original figure and then take the result, transpose it, glue it to the original and then proceed [with] what we did before: cut, rearrange, paste — oops— paste and glue, and tile. Now this transformation has doubled the area of the original figure, and therefore we have just learned that the area of the triangle equals the area of this rectangle divided by two. But we discovered it by self-exploration. So, in addition to learning some useful geometry, the child has been exposed to some pretty sophisticated science strategies, like reduction, which is the art of transforming a complex problem into a simple one, or generalization, which is at the heart of any scientific discipline, or the fact that some properties are invariant under some transformations. And all this is something that a very young child can pick up using such mobile apps. So presently, we are doing the following: First of all, we are decomposing the K-12 math curriculum into numerous such apps. And because we cannot do it on our own, we've developed a very fancy authoring tool that any author, any parent or actually anyone who has an interest in math education, can use this authoring tool to develop similar apps on tablets without programming. And finally, we are putting together an adaptive ecosystem that will match different learners with different apps according to their evolving learning style. The driving force behind this project is my colleague Shmulik London, and, you see, just like Salman did about 90 years ago, the trick is to surround yourself with brilliant people, because at the end, it's all about people. And a few years ago, I was walking in Tel Aviv and I saw this graffiti on a wall, and I found it so compelling that by now I preach it to my students, and I'd like to try to preach it to you. Now, I don't know how many people here are familiar with the term ""mensch."" It basically means to be human and to do the right thing. And with that, what this graffiti says is, ""High-tech schmigh-tech. The most important thing is to be a mensch."" (Laughter) Thank you. (Applause) (Applause)"	"這位是我爺爺薩爾曼‧蕭肯他出生時家裡很窮父母都沒上過學還要養六個小孩14歲的時候他被迫輟學,幫忙賺錢養家後來都沒有回過學校但他的事業成就輝煌建立了百貨帝國我爺爺凡事要求盡善盡美他開的每家百貨公司都堪稱包浩斯風格建築的極品他熱中自學到了極點和其他事情一樣他自學得有聲有色他的身邊總圍繞著一群當時年輕,默默無聞的學者像布伯,阿格農,卡夫卡等爺爺每個月付他們薪水讓他們能安心寫作 但30年代末,納粹迫害猶太人爺爺知道大禍要臨頭了他帶著家人逃出德國沒有帶走任何財產他的百貨公司被沒收從此以後,他窮畢生之力追求文化與藝術中學沒念完的爺爺享壽82歲他是傑出的知識份子創辦耶路撒冷希伯來大學並擔任第一屆董事長他還創立蕭肯出版社(Schocken Books)當時廣受好評後來被藍燈書屋(Random House) 買下這就是自學的力量 這是我的父母他們沒有接受大學教育因為他們忙著成家忙著建立以色列但就像我爺爺,他們終其一生都自學不輟,我的家裡堆了上千本書,唱片,藝術品我清楚記得父親說過等左鄰右舍都買電視機了我們再去買收音機吧 這是我我拿的是我的第一個算盤但我父親會說我拿著山寨版的 iPad我在家裡學到了一件事就是教育家不見得要教書而是給你環境和資源激發你自學的本能自主學習,自我探索做自己的主人都是良好教育下養成的美德 我現在要和大家分享一個故事關於一門注重自主學習的電腦課程是我和我的好同事諾姆‧尼森共同創立的照片裡是我和諾姆我們小時候都很迷基本的科學原理多年以後,我們的知識更豐富了科學和科技的素養愈來愈高從小對基本原理的崇敬之情只有愈變愈強烈所以毫無意外,12 年前我和諾姆都當上教授在教計算機科學了我們卻覺得沮喪因為電腦愈做愈精密我們的學生卻見樹不見林事實上,如果想了解計算機科學的精髓你不能只會操作電腦裡各式各樣的專利授權軟體我和諾姆體認到如果我們希望學生了解電腦如何運作而且是徹底了解也許最好的辦法就是讓學生完成一臺功能齊全,堪用且好用的電腦而且要從最基本的原理開始學習 於是我們開始著手進行我和諾姆認為要蓋萬丈高樓就要從平地開始我們從基本的 NAND 邏輯運算開始NAND 是最普通的一種邏輯閘有四組輸入輸出的數據我們一開始這麼告訴學生上帝給我們 NAND要我們組一台電腦怎麼做呢?上帝說,""一次一個步驟就好""於是乎,我們就開始了從低階,普通的NAND邏輯閘起手我們以精心設計的學習進度帶領學生他們先做出了晶片組到硬體平台,組合語言,虛擬機器再到基本款的作業系統和編譯程序最後完成了一種類似 JAVA的程式語言,我們稱之為 ""JACK""我們學生慶祝這項成果的方式是利用 JACK 寫了很多有趣的遊戲如彈珠台,貪食蛇,俄羅斯方塊等各位應該能想像他們有多高興因為他們玩的俄羅斯方塊是用 JACK 語言編寫再使用自己寫的編譯程序轉為機器語言接著看轉譯出來的結果用來跑程式的機器還是自己做出來的是由幾千組 NAND 邏輯閘累積起來的這種成就感非同小可因為他們從基本原理開始最後做出了非常精密而且可以用的機器 我和諾姆用了五年時間簡化課程,製作教材和設備讓學生用一學期就可以組一台電腦這是我們偉大的團隊幫助我們做到了作法是解構電腦分出許多獨立單元各單元都可以分別開課分別完成組裝與測試一開始我和諾姆就決定基本課程都免費上網就看得到所以晶片規格應用程式介面 (API), 專案說明軟體工具,硬體模擬器模擬 CPU很多的幻燈片,演講等等我們都放上網路歡迎大家來瀏覽找他們需要的資源並自行運用 後來神奇的事情發生了大家都來了沒過多久,許多人都照我們的課程組電腦""從 NAND 到俄羅斯方塊""更是史上第一門線上開放式課程儘管 7 年前我們還不知道線上開放式課程的概念我們發現自修課程好像愈來愈多了很多都用我們的教材例如這位普勒蒙德先生是印度喀拉拉邦的工程師他帶領一群人自學用我們的教材組裝電腦他教得很好這位帕爾克 · 沙阿先生是孟買的工程師他把我們的課程分得更細也更好教,並把課程用於他首創的""電腦DIY"" 課程 這些被我們課程吸引的人通常有一顆愛電腦的心他們想知道電腦如何運作他們想一起研究這個電腦迷俱樂部在華盛頓特區就使用我們的教材開課我們的教材容易取得大家都可以用所以不同的人運用就會有非常不同出乎意料的結果例如這位中國廣州的余芳明 (音譯) 先生使用現場可程式邏輯閘陣列( FPGA) 技術組裝我們教材中的電腦並透過視訊短片教給其他人這位班‧克萊杜克先生設計了一個很棒的遊戲可以在我們的電腦裡玩班設計的是一個很複雜的 3D 迷宮他使用""當個創世神"" (Minecraft)搭載的 3D 模擬引擎Minecraft 玩家為之瘋狂班也一夕之間爆紅 事實上,對不少人來說這趟 ""從 NAND 到俄羅斯方塊"" 之旅改變了他們的一生例如這位丹‧朗茲先生他在密西根東蘭辛大學主修音樂和數學幾個星期前,丹發表一篇文章在我們的網站上我想念給你們聽聽丹是這麼說的 ""我來這裡學電腦,因為懂電腦很重要""""跟識字和算術一樣""""而我完成了課程,我從來沒這麼認真過""""從來沒碰過這麼大的挑戰""""但看看我學到了什麼東西""""這個課程上再多次都值得""""各位還在考慮的朋友""""這趟路很難走,但走完你會脫胎換骨"" 丹代表了許多自學的人他們被我們的課程吸引他們主動學習而且有件事相當驚人這些人根本不計較成績的事他們這樣做只有一個動機他們有極大的學習熱情 講到這點我想提一下傳統的大學評分制度我很討厭我們都太迷信分數對數據資料深信不疑但光靠分數就決定了是否及格受教育最重要的事就是不要被當掉邱吉爾說,所謂勇氣是能夠一而再,再而三失敗還不喪失熱情(喬艾斯說) 錯誤就是通往發現之門但我們不能容忍錯誤我們只著重分數所以我們把學生的成績加總算出總分,再劃分等第好像在額頭上蓋章一樣這就是你的程度在我看來,這種亂象非常嚴重打分數讓教育制度更退步 既然說到退步我就講講如何進步我要和各位分享我最近的一項計畫不是剛剛講的電腦課但有完全一樣的特色就是自學,做中學自我探索和團體學習這個計畫涵蓋 幼稚園到中學的數學教育從幼稚園數學開始而且用平板電腦來教因為我們認為學數學也應該動手做 我們是這麼做的基本上,我們開發了很多應用程式每個都解釋一個特定的數學概念以面積的概念為例處理面積問題的時候程式裡提供一套工具讓孩子操作,並從中學習如果要計算面積最直接的方法是填滿法用這種特定形狀的磁磚來填再數數要用多少磁磚才能填滿這樣的小活動可以幫孩子建立初步的面積概念 那平行四邊形的面積呢?用填滿法的話算不出來,對吧?所以可以試試看這裡其他的工具經過幾次嘗試和錯誤也許某一次就會發現好幾種方法當中這一種可以用用美工刀切重新排列圖形,再黏起來然後就是剛才的填滿法了(掌聲)這個變換形狀的方法沒有改變原圖的面積所以 6 歲的孩子來玩就會發現一種好用的算法來計算平行四邊形的面積 我們不是要用應用程式代替老師應該更重視老師的功能而不是換掉他們 那三角形的面積呢?經過幾次嘗試和錯誤不管有沒有人幫忙孩子可能會發現可以複製原圖把複製出的圖形移動,旋轉再和原圖黏在一起然後重複剛才做的裁切,重新排列,黏貼和填滿現在這個新圖形的面積是原圖的兩倍因此孩子會學到三角形的面積等於這個矩形的面積除以二孩子透過探索找到這個算法 所以除了學習幾何學知識孩子也會接觸一些較複雜的科學方法,例如簡化法利用簡化法能把複雜的問題變簡單或者相當重要的歸納法幾乎所有科學領域都用得到或是不變量的概念意思是經過數學轉換量仍然保持不變這些原理,年紀還很小的孩子玩應用程式就學得到目前我們的工作如下首先將幼稚園到中學的數學課程分成許多應用程式我們沒辦法分得更細所以我們開發了一個很別緻的教材製作工具讓父母或其他人自己做誰對數學教育感興趣就可以用這種工具開發類似的程式不用再從頭開始做最後把這些程式結合成一個系統讓不同的學生可以依照他們的學習方式使用裡面的的應用程式 這個計劃的幕後推手是我的同事史穆里克‧朗登我做的事和我爺爺 90 年前做的一樣我找了一些很厲害的人因為到頭來人才是最重要的幾年前,我在特拉維夫散步我看到一面牆上的塗鴉我當時深深被吸引到現在我還是會跟學生講這幅塗鴉我也想跟各位講不曉得各位知不知道mensch 這個字這個字的意思是要當好人要做對的事這幾個字的意思是""科技無限好""""當好人最重要""謝謝各位(掌聲)"
