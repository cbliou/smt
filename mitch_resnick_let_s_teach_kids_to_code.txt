Talk	en	zh-tw
mitch_resnick_let_s_teach_kids_to_code	"It was a Saturday afternoon in May, and I suddenly realized that the next day was Mother's Day, and I hadn't gotten anything for my mom, so I started thinking about what should I get my mom for Mother's Day? I thought, why don't I make her an interactive Mother's Day card using the Scratch software that I'd been developing with my research group at the MIT Media Lab? We developed it so that people could easily create their own interactive stories and games and animations, and then share their creations with one another. So I thought, this would be an opportunity to use Scratch to make an interactive card for my mom. Before making my own Mother's Day card, I thought I would take a look at the Scratch website. So over the last several years, kids around the world ages 8 and up, have shared their projects, and I thought, I wonder if, of those three million projects, whether anyone else has thought to put up Mother's Day cards. So in the search box I typed in ""Mother's Day,"" and I was surprised and delighted to see a list of dozens and dozens of Mother's Day cards that showed up on the Scratch website, many of them just in the past 24 hours by procrastinators just like myself. So I started taking a look at them. (Music) I saw one of them that featured a kitten and her mom and wishing her mom a happy Mother's Day. And the creator very considerately offered a replay for her mom. Another one was an interactive project where, when you moved the mouse over the letters of ""Happy Mom Day,"" it reveals a special happy Mother's Day slogan. (Music) In this one, the creator told a narrative about how she had Googled to find out when Mother's Day was happening. (Typing) And then once she found out when Mother's Day was happening, she delivered a special Mother's Day greeting of how much she loved her mom. So I really enjoyed looking at these projects and interacting with these projects. In fact, I liked it so much that, instead of making my own project, I sent my mom links to about a dozen of these projects. (Laughter) And actually, she reacted exactly the way that I hoped that she would. She wrote back to me and she said, ""I'm so proud to have a son that created the software that allowed these kids to make Mother's Day cards for their mothers."" So my mom was happy, and that made me happy, but actually I was even happier for another reason. I was happy because these kids were using Scratch just in the way that we had hoped that they would. As they created their interactive Mother's Day cards, you could see that they were really becoming fluent with new technologies. What do I mean by fluent? I mean that they were able to start expressing themselves and to start expressing their ideas. When you become fluent with language, it means you can write an entry in your journal or tell a joke to someone or write a letter to a friend. And it's similar with new technologies. By writing, be creating these interactive Mother's Day cards, these kids were showing that they were really fluent with new technologies. Now maybe you won't be so surprised by this, because a lot of times people feel that young people today can do all sorts of things with technology. I mean, all of us have heard young people referred to as ""digital natives."" But actually I'm sort of skeptical about this term. I'm not so sure we should be thinking of young people as digital natives. When you really look at it, how is it that young people spend most of their time using new technologies? You often see them in situations like this, or like this, and there's no doubt that young people are very comfortable and familiar browsing and chatting and texting and gaming. But that doesn't really make you fluent. So young people today have lots of experience and lots of familiarity with interacting with new technologies, but a lot less so of creating with new technologies and expressing themselves with new technologies. It's almost as if they can read but not write with new technologies. And I'm really interested in seeing, how can we help young people become fluent so they can write with new technologies? And that really means that they need to be able to write their own computer programs, or code. So, increasingly, people are starting to recognize the importance of learning to code. You know, in recent years, there have been hundreds of new organizations and websites that are helping young people learn to code. You look online, you'll see places like Codecademy and events like CoderDojo and sites like Girls Who Code, or Black Girls Code. It seems that everybody is getting into the act. You know, just at the beginning of this year, at the turn of the new year, New York City Mayor Michael Bloomberg made a New Year's resolution that he was going to learn to code in 2012. A few months later, the country of Estonia decided that all of its first graders should learn to code. And that triggered a debate in the U.K. about whether all the children there should learn to code. Now, for some of you, when you hear about this, it might seem sort of strange about everybody learning to code. When many people think of coding, they think of it as something that only a very narrow sub-community of people are going to be doing, and they think of coding looking like this. And in fact, if this is what coding is like, it will only be a narrow sub-community of people with special mathematical skills and technological background that can code. But coding doesn't have to be like this. Let me show you about what it's like to code in Scratch. So in Scratch, to code, you just snap blocks together. In this case, you take a move block, snap it into a stack, and the stacks of blocks control the behaviors of the different characters in your game or your story, in this case controlling the big fish. After you've created your program, you can click on ""share,"" and then share your project with other people, so that they can use the project and start working on the project as well. So, of course, making a fish game isn't the only thing you can do with Scratch. Of the millions of projects on the Scratch website, there's everything from animated stories to school science projects to anime soap operas to virtual construction kits to recreations of classic video games to political opinion polls to trigonometry tutorials to interactive artwork, and, yes, interactive Mother's Day cards. So I think there's so many different ways that people can express themselves using this, to be able to take their ideas and share their ideas with the world. And it doesn't just stay on the screen. You can also code to interact with the physical world around you. Here's an example from Hong Kong, where some kids made a game and then built their own physical interface device and had a light sensor, so the light sensor detects the hole in the board, so as they move the physical saw, the light sensor detects the hole and controls the virtual saw on the screen and saws down the tree. We're going to continue to look at new ways of bringing together the physical world and the virtual world and connecting to the world around us. This is an example from a new version of Scratch that we'll be releasing in the next few months, and we're looking again to be able to push you in new directions. Here's an example. It uses the webcam. And as I move my hand, I can pop the balloons or I can move the bug. So it's a little bit like Microsoft Kinect, where you interact with gestures in the world. But instead of just playing someone else's game, you get to create the games, and if you see someone else's game, you can just say ""see inside,"" and you can look at the stacks of blocks that control it. So there's a new block that says how much video motion there is, and then, if there's so much video motion, it will then tell the balloon to pop. The same way that this uses the camera to get information into Scratch, you can also use the microphone. Here's an example of a project using the microphone. So I'm going to let all of you control this game using your voices. (Crickets chirping) (Shouts) (Chomping) (Laughter) (Applause) As kids are creating projects like this, they're learning to code, but even more importantly, they're coding to learn. Because as they learn to code, it enables them to learn many other things, opens up many new opportunities for learning. Again, it's useful to make an analogy to reading and writing. When you learn to read and write, it opens up opportunities for you to learn so many other things. When you learn to read, you can then read to learn. And it's the same thing with coding. If you learn to code, you can code to learn. Now some of the things you can learn are sort of obvious. You learn more about how computers work. But that's just where it starts. When you learn to code, it opens up for you to learn many other things. Let me show you an example. Here's another project, and I saw this when I was visiting one of the computer clubhouses. These are after-school learning centers that we helped start that help young people from low-income communities learn to express themselves creatively with new technologies. And when I went to one of the clubhouses a couple years ago, I saw a 13-year-old boy who was using our Scratch software to create a game somewhat like this one, and he was very happy with his game and proud of his game, but also he wanted to do more. He wanted to keep score. So this was a game where the big fish eats the little fish, but he wanted to keep score, so that each time the big fish eats the little fish, the score would go up and it would keep track, and he didn't know how to do that. So I showed him. In Scratch, you can create something called a variable. I'll call it score. And that creates some new blocks for you, and also creates a little scoreboard that keeps track of the score, so each time I click on ""change score,"" it increments the score. So I showed this to the clubhouse member — let's call him Victor — and Victor, when he saw that this block would let him increment the score, he knew exactly what to do. He took the block and he put it into the program exactly where the big fish eats the little fish. So then, each time the big fish eats the little fish, he will increment the score, and the score will go up by one. And it's in fact working. And he saw this, and he was so excited, he reached his hand out to me, and he said, ""Thank you, thank you, thank you."" And what went through my mind was, how often is it that teachers are thanked by their students for teaching them variables? (Laughter) It doesn't happen in most classrooms, but that's because in most classrooms, when kids learn about variables, they don't know why they're learning it. It's nothing that, really, they can make use of. When you learn ideas like this in Scratch, you can learn it in a way that's really meaningful and motivating for you, that you can understand the reason for learning variables, and we see that kids learn it more deeply and learn it better. Victor had, I'm sure, been taught about variables in schools, but he really didn't — he wasn't paying attention. Now he had a reason for learning variables. So when you learn through coding, and coding to learn, you're learning it in a meaningful context, and that's the best way of learning things. So as kids like Victor are creating projects like this, they're learning important concepts like variables, but that's just the start. As Victor worked on this project and created the scripts, he was also learning about the process of design, how to start with the glimmer of an idea and turn it into a fully-fledged, functioning project like you see here. So he was learning many different core principles of design, about how to experiment with new ideas, how to take complex ideas and break them down into simpler parts, how to collaborate with other people on your projects, about how to find and fix bugs when things go wrong, how to keep persistent and to persevere in the face of frustrations when things aren't working well. Now those are important skills that aren't just relevant for coding. They're relevant for all sorts of different activities. Now, who knows if Victor is going to grow up and become a programmer or a professional computer scientist? It's probably not so likely, but regardless of what he does, he'll be able to make use of these design skills that he learned. Regardless of whether he grows up to be a marketing manager or a mechanic or a community organizer, that these ideas are useful for everybody. Again, it's useful to think about this analogy with language. When you become fluent with reading and writing, it's not something that you're doing just to become a professional writer. Very few people become professional writers. But it's useful for everybody to learn how to read and write. Again, the same thing with coding. Most people won't grow up to become professional computer scientists or programmers, but those skills of thinking creatively, reasoning systematically, working collaboratively — skills you develop when you code in Scratch — are things that people can use no matter what they're doing in their work lives. And it's not just about your work life. Coding can also enable you to express your ideas and feelings in your personal life. Let me end with just one more example. So this is an example that came from after I had sent the Mother's Day cards to my mom, she decided that she wanted to learn Scratch. So she made this project for my birthday and sent me a happy birthday Scratch card. Now this project is not going to win any prizes for design, and you can rest assured that my 83-year-old mom is not training to become a professional programmer or computer scientist. But working on this project enabled her to make a connection to someone that she cares about and enabled her to keep on learning new things and continuing to practice her creativity and developing new ways of expressing herself. So as we take a look and we see that Michael Bloomberg is learning to code, all of the children of Estonia learn to code, even my mom has learned to code, don't you think it's about time that you might be thinking about learning to code? If you're interested in giving it a try, I'd encourage you to go to the Scratch website. It's scratch.mit.edu, and give a try at coding. Thanks very much. (Applause)"	"那是五月的一個週六下午我忽然意識到隔天就是母親節而我沒有準備任何禮物給我媽所以我開始思考我要送他什麼當作母親節禮物呢?我想到何不為她做一張互動式的母親節賀卡呢?使用我開發的塗鴉軟體 Scratch 製作我的研究小組在麻省理工大學 (MIT) 媒體實驗室所研發的軟體我們製作了這個軟體，使人們能夠輕鬆創作他們自己的互動故事、遊戲或者是動畫並且把這些創作與別人分享然後我想這或許是一個好機會使用這個塗鴉軟體 Scratch 作一張互動賀卡給我媽媽 在做我的母親卡之前我想到我可以先逛看看這個塗鴉網站 ( Scratch )幾年前開始，世界各地8歲或更大的孩子們已經開始透過這個網站分享他們的作品所以我想在這300萬件作品裏會不會有人想到要放上他們作的母親節賀卡呢所以我就在搜尋欄中鍵入「母親節」之後我驚訝又高興地看到很多很多的母親節賀卡在 Scratch 上展示許多賀卡是在24小時內上載的像我一樣愛拖延的人所以我開始瀏覽這些作品（音樂）我看到一張以小貓和她的媽媽為主角的卡片，卡片中的小貓祝媽媽母親節快樂作者非常貼心地為他媽媽做了一個重播按鈕另一個是一件互動作品當你把鼠標移動到這些""母親節快樂""的字母上面時它會出現一句特別的母親節祝詞(音樂) 而在這個作品裏，創作者講述了她是如何用 Google (谷歌搜尋引擎) 來找出到底哪一天是母親節(打字聲) 而當她發現當天就是母親節時她立即送出了一份特別的母親節祝福來表達她有多愛她的媽媽 我真的很喜歡瀏覽這些作品並且與這些作品互動事實上，由於太喜歡這些作品，讓我打消了親手製作賀卡的念頭改為把十多個作品的連結發送給我媽媽（笑聲）而實際上，她的反應就正如我希望的一樣她回覆我並說「我非常以有這樣的兒子為傲，因為他能夠打造出一個軟體，使孩子們能夠製作母親節賀卡送給他們的媽媽們。」 所以我媽媽很高興，這令我也很高興但事實上我有一個更值得高興的理由我高興是因為這些孩子能夠按照我們當初設計 Scratch的用法來使用它當他們製作互動母親節賀卡的時候你可以看到他們真的能夠更熟練地掌握新科技我說的熟練是指甚麽呢?我是指他們已經可以開始表達他們自己並且開始表達他們的想法當你開始熟練於一個語言時這意味著你可以在你的日誌上寫一個條目告訴別人一個幽默的笑話或者給朋友寫一封信使用新科技也是很類似這樣書寫或創作這些互動的母親節賀卡時這些孩子顯示出他們有多熟練於這些新科技的使用 你或許對這件事情並不感到驚訝因為大多數時候人們都認為現代的年輕人熟於使用科技做各式各樣的事情我的意思是，我們都聽過年輕人被稱為「數碼時代的原住民」某種程度上我認為這個用詞是有點問題的我不太肯定我們應該把年輕人看作數碼時代的原住民當你真的看看這個問題，年輕人是怎樣花大部分的時間使用新科技呢?你經常看到的情況會是像這樣或是像這樣的可以肯定的是年輕人可以很輕鬆自在的瀏覽網頁上網聊天、互通短訊和打電動但這些並不會真的使你熟練 今天的年輕人有許多與新科技互動的經驗亦對如何與科技互動相當了解但使用新科技來創作的人就少得多了也不擅長透過新科技來表達自己的想法這就好像在新科技的領域上，他們雖然懂得閱讀卻不懂書寫一樣 我真的對於怎樣能夠令年輕人對科技更熟練使他們能夠使用新科技創作很感興趣這表示他們需要能夠寫自己的電腦軟體，或是程式 很有趣的是人們逐漸地開始發現學習編寫電腦程式的重要性你知道最近幾年，這裏有數以百計的新機構和網站幫助年輕人學習編寫電腦程式你看網上有像「編程學院」Codecademy 這類的地方有像CoderDojo 一樣的組織(註: 該組織在世界各地幫助年輕人學習如何寫程式)又有像「女生愛編程」Girls Who Code又或者「黑女編程」Black Girls Code 這一類的網站看起來每個人都開始在參與這件事你知道，就在年初進入新的一年之際紐約市長米高．彭博為他自己定下的新年目標，就是要在2012 年中學會編寫電腦程式數個月後，愛沙尼亞這個國家決定該國的一年級學生全部都要學習編寫電腦程式這在英國激發了一場辯論探討是否需要得讓全部孩子都必須學習編寫電腦程式 你們當中有些人在聽到這個提議時或許會感到有點奇怪，為什麼每一個人都要學寫程式當大部人想到編程，他們想到的是一個很狹隘定義的「亞社群」是專屬於某些人的活動他們覺得程式是長這樣的事實上，假如程式真的長這樣當然只有很少一群人會碰觸就是那些擁有特別的數學技能，以及科技背景的人才會做的事 但編寫程式寫毋須是這樣的讓我向你介紹在塗鴉軟件Scratch 中編寫程式會是怎樣吧使用 Scratch 寫程式的話，你就像是把積木接在一起在這個情況下，你移動一個積木把它們堆在一起那堆積木就會控制你的遊戲或故事中不同角色的行為這個例子中，就是要控制那條大魚當你創造了你的程式後，你可以點擊「分享」接著你就可以把你的程式與其他人分享別人可以用你的程式並且也可以調整成他們自己的 當然，創作一個關於魚的遊戲並不是Scratch 唯一能夠做的事在Scratch 網站上數以百萬的作品當中可以說是包羅萬有，從動畫故事到學校科學習作到動漫肥皂劇到虛擬建築工具箱到二次創作的經典電玩遊戲到政治傾向調查到三角幾何學教室到互動藝術作品。對!還有互動母親節賀卡 所以我認為這裏有很多的途徑讓人們可以從中表達自己跟全世界分享他們的靈感而且，這不單單局限在電腦螢幕上你可以利用編寫程式，去和周遭的現實世界互動這裏有一個來自香港的例子這些孩子製作了一個遊戲他們打造了一個實體介面裝置它有一個光感應器，那個感應器會感應木板上的那個洞所以在他們移動那把實體鋸子時那個光感應器可以感應到那個洞進而能控制螢幕上的虛擬鋸子去鋸掉那棵大樹 我們一直在尋找新的方法去連繫現實與虛擬世界並且連接我們周遭的世界這是一個來自新版本Scratch 的例子將會在數個月之後發佈我們再次嘗試來帶給你新的想法這是一個例子它用上了網絡攝影機當我移動我的手，我可以拍破那些氣球又或者移動那蟲子這有點像微軟的 Kinect 裝置讓你可以用身體語言跟世界互動但與其參與其他人的遊戲你可以創作你自己的遊戲如果你看到別人的遊戲你可以說「讓我們來看看裏面長甚麼樣」你可以看到那堆控制遊戲的積木這堆新的積木就是顯示攝影機裡有多少動作如果有大幅的動作它就會指示那些氣球爆開 正如你可以用攝影機去輸入資料到 Scratch 一樣你亦可以利用麥克風這是一個利用麥克風創作的例子我將會讓你們所有人一起去控制這個遊戲用你們的聲音 (蟋蟀叫聲) (呼叫) (咀嚼聲)(笑聲)(呼叫)(蝙蝠跌落聲)(掌聲) 當孩子們在創作這樣的作品時他們在學習編寫電腦程式但更重要的是，他們從編寫電腦程式中學習因為從學習編寫電腦程式的過程中他們可以學到更多其他的東西開啟不同學習機會的大門再一次，閱讀與寫作的比喻在這裏很有用當你學習閱讀及寫作時，它們為你引進了學習更多其他事物的機會當你學習閱讀時，你也同時是經由閱讀去學習到其他事情編寫電腦程式也是一樣當你學習編寫電腦程式時，你也同時藉由程式學習到其他事情有一些你可以學到的事情是顯而易見的你可以知道電腦是怎樣運作的但這只是個開端當你學習編寫電腦程式時，它為你開啟學習很多其他東西的大門 讓我為你展示一個例子吧這裏有另一個作品我第一次看到它是當我在參觀某一個電腦俱樂部的時候這是一些我們協助成立的課餘學習中心幫助來自低收入家庭的孩子學習如何利用新科技有創意地表達自己當我在幾年前到其中一個這樣的俱樂部時我看到一個13歲的男孩用我們的 Scratch去創作一個類似這樣的遊戲他非常高興，並且對自己的遊戲感到自豪但他還想做更多他希望能夠計分這是一個大魚吃掉小魚的遊戲但他希望計分，所以每當大魚吃掉小魚的時候分數便會上升，而分數也被記錄下來。但他不懂得怎樣做所以我向他示範可以怎樣做在Scratch 裏面，你可以建立一個物件叫做「變量」我將它取名為「分數」接著它會為你建立幾個積木同時建立一個小小的計分板，幫助你計分每次我點擊「改變分數」時，分數就會增加所以我向這個會員展示這個方法 —暫且就叫他做維克多吧 —當維克多見到這些積木能夠幫他增加分數時他當下就知道要做些甚麼了他拿了這些積木把它們放進自己的程式中正放到大魚吃掉小魚的動作之後接著，每次當大魚要吃小魚的時候他就會增加分數，那個分數會增加一分這的確是可以運作的當他看到這裡，他非常地興奮他向我伸出手不斷地說: 「謝謝，謝謝，謝謝」那個時候我心想:學校裡的老師有多常被學生這樣感謝呢?只因為他教了他一個「變量」的概念 (笑聲)這不常發生在教室裏這是因為在大部分的教室中，當孩子在學習變量時他們不知道為何他們在學習這個題目他們沒有運用變量的場合當你在Scratch 中學習類似的概念時你可以從一個有意義、同時又具有動機的方式學習這讓你明白為什麼我們要學習變量我們看到孩子能夠把它學得更深入和更好我相信學校有教過他變量的概念但實際上他沒有學到 — 因為他沒有集中精神去學這個課題現在，他有一個理由去學習變量所以當你從寫程式中學習，並透過它學到更多知識你就是在一個有意義的脈絡中學習，而這 就最好的學習方法 像維克多的孩子們在創作他們的作品時他們實際上是在學習一些像變量這樣重要的概念但這只是個開端當維克多在這個創作中埋頭苦幹，建立這些程式碼的同時他也在學習該如何設計怎樣將某個靈光乍現變成一個成熟的、可以運作的專案就像你在這裏看到的那個一樣所以他在學習很多不同的、核心的設計原則怎樣實驗新的想法怎樣將複雜的概念分割成更小的單位怎樣與其他人合作發展你的專案當事情不對勁時，怎樣尋找、糾正程式中的錯誤如何堅持下去並且再接再厲當面對事情發展不如意，這些挫折的時刻這些都是重要的技能而且它們並不是只與編寫程式相關它們關係到所有不同的活動 誰知道維克多長大後會不會成為一位程式設計員，又或者一位專業的計算機科學家呢?實際上這並不太可能但姑且不論他將來會做甚麼他都會能夠運用他學到的這些設計技能不管他將來是否會成為一個市場行銷經理一個工程師，或是社區組織者這些概念對每個人都很實用再一次，用語言來比喻這件事非常有用當你可以流暢地閱讀及寫作時不代表你做這些事是為了成為一個專業的作家很少人會成為專業作家但對所有人來說，學習閱讀和寫作還是很有用的這跟編寫程式是一樣的道理大部分人不會在長大後成為專業的計算機科學家或者程式設計員但是像創意思考系統性推論、與其他人合作，這樣的技能 —這些你用Scratch 編寫程式時所發展出的技能 —是任何職業都能用得到的技能 事實上不只是關於你從事的工作你可以從編寫程式中在你的私人生活中表達你的構思和想法就讓我在結束前再講一個例子這個例子來自我把母親節賀卡寄給媽媽以後她決定她要學會使用Scratch所以她為我的生日製作了這個作品並且寄了一張Scratch生日卡給我雖然這個作品並不會贏取任何設計獎項而且我們可以百分之百確定，我那83歲的媽媽不是為了要成為專業的程式設計員，或者計算機科學家但她在這個設計中埋頭苦幹的時候她可以連結她所關心的人同時這個過程可以幫助她學習新的事物使她可以繼續運用她的創造力建立新方法來表達她自己 所以，當我們環顧四週我們可以看到米高．彭博在學習編寫電腦程式所有愛沙尼亞的孩子也都在學習電腦程式甚至連我媽也在學習寫電腦程式你不覺得，也是時候輪到你來學習編寫電腦程式嗎?如果你有興趣試試看我會鼓勵你瀏覽 Scratch 的網站它是 scratch.mit.edu接著動手試試編寫電腦程式 非常感謝大家 (掌聲)"
